// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	{{ range $index, $element := .imports -}}
	{{ $element }}
	{{ end }}
)

{{- range .fields }}
{{ .GenOneOfMessages }}
{{- end }}

{{ .description }}
type {{ .messageName }} struct {
{{- range .fields }}
    {{ .GenMessageField }}
{{- end }}}

var (
	protoPool{{ .messageName }} = sync.Pool{
	    New: func() any {
		    return &{{ .messageName }}{}
	    },
    }
    {{- range .fields }}{{ .GenPool }}{{- end }}
)


func New{{ .messageName }}() *{{ .messageName }} {
    if !UseProtoPooling.IsEnabled() {
        return &{{ .messageName }}{}
    }
    return protoPool{{ .messageName }}.Get().(*{{ .messageName }})
}

func Delete{{ .messageName }}(orig *{{ .messageName }}, nullable bool) {
    if orig == nil {
        return
    }

    if !UseProtoPooling.IsEnabled() {
        orig.Reset()
        return
    }

    {{ range .fields }}{{ .GenDelete }}{{ end }}
    orig.Reset()
    if nullable {
        protoPool{{ .messageName }}.Put(orig)
    }
}

func Copy{{ .messageName }}(dest, src *{{ .messageName }}) *{{ .messageName }}{
	// If copying to same object, just return.
	if src == dest {
		return dest
    }

    if src == nil {
        return nil;
    }

    if dest == nil {
        dest = New{{ .messageName }}();
    }

    {{- range .fields }}
	{{ .GenCopy }}
	{{- end }}

	return dest
}

func Copy{{ .messageName }}Slice(dest, src []{{ .messageName }}) []{{ .messageName }} {
    var newDest []{{ .messageName }}
    if cap(dest) < len(src) {
        newDest = make([]{{ .messageName }}, len(src))
    } else {
        newDest = dest[:len(src)]
        // Cleanup the rest of the elements so GC can free the memory.
        // This can happen when len(src) < len(dest) < cap(dest).
        for i := len(src); i < len(dest); i++ {
            Delete{{ .messageName }}(&dest[i], false)
        }
    }
    for i := range src {
        Copy{{ .messageName }}(&newDest[i], &src[i])
    }
    return newDest
}

func Copy{{ .messageName }}PtrSlice(dest, src []*{{ .messageName }}) []*{{ .messageName }} {
    var newDest []*{{ .messageName }}
    if cap(dest) < len(src) {
        newDest = make([]*{{ .messageName }}, len(src))
        // Copy old pointers to re-use.
        copy(newDest, dest)
        // Add new pointers for missing elements from len(dest) to len(srt).
        for i := len(dest); i < len(src); i++ {
            newDest[i] = New{{ .messageName }}()
        }
	} else {
        newDest = dest[:len(src)]
        // Cleanup the rest of the elements so GC can free the memory.
        // This can happen when len(src) < len(dest) < cap(dest).
        for i := len(src); i < len(dest); i++ {
            Delete{{ .messageName }}(dest[i], true)
            dest[i] = nil
        }
        // Add new pointers for missing elements.
        // This can happen when len(dest) < len(src) < cap(dest).
        for i := len(dest); i < len(src); i++ {
            newDest[i] = New{{ .messageName }}()
        }
    }
    for i := range src {
        Copy{{ .messageName }}(newDest[i], src[i])
    }
    return newDest
}


func (orig *{{ .messageName }}) Reset() {
	*orig = {{ .messageName }}{}
}

// MarshalJSON marshals all properties from the current struct to the destination stream.
func (orig *{{ .messageName }}) MarshalJSON(dest *json.Stream) {
	dest.WriteObjectStart()
	{{ range .fields -}}
	{{ .GenMarshalJSON }}
	{{ end -}}
	dest.WriteObjectEnd()
}

// UnmarshalJSON unmarshals all properties from the current struct from the source iterator.
func (orig *{{ .messageName }}) UnmarshalJSON(iter *json.Iterator) {
	for f := iter.ReadObject(); f != ""; f = iter.ReadObject() {
		switch f {
		{{ range .fields -}}
		{{ .GenUnmarshalJSON }}
		{{ end -}}
		default:
			iter.Skip()
		}
	}
}

func (orig *{{ .messageName }}) SizeProto() int {
	var n int
	var l int
	_ = l
	{{ range .fields -}}
	{{ .GenSizeProto }}
	{{ end -}}
	return n
}

func (orig *{{ .messageName }}) MarshalProto(buf []byte) int {
	pos := len(buf)
	var l int
	_ = l
	{{ range .fields -}}
	{{ .GenMarshalProto }}
	{{ end -}}
	return len(buf) - pos
}

func (orig *{{ .messageName }}) UnmarshalProto(buf []byte) error {
	var err error
	var fieldNum int32
	var wireType proto.WireType

	l := len(buf)
	pos := 0
	for pos < l {
		// If in a group parsing, move to the next tag.
		fieldNum, wireType, pos, err = proto.ConsumeTag(buf, pos)
		if err != nil {
			return err
		}
		switch fieldNum {
			{{ range .fields -}}
			{{ .GenUnmarshalProto }}
			{{ end -}}
			default:
				pos, err = proto.ConsumeUnknown(buf, pos, wireType)
				if err != nil {
					return err
				}
		}
	}
	return nil
}

func GenTest{{ .messageName }}() *{{ .messageName }} {
    orig := New{{ .messageName }}()
    {{- range .fields }}
    orig.{{ .GetName }} = {{ .TestValue }}
    {{- end }}
    return orig
}

func GenTest{{ .messageName }}PtrSlice() []*{{ .messageName }} {
    orig := make([]*{{ .messageName }}, 5)
    orig[0] = New{{ .messageName }}()
    orig[1] = GenTest{{ .messageName }}()
    orig[2] = New{{ .messageName }}()
    orig[3] = GenTest{{ .messageName }}()
    orig[4] = New{{ .messageName }}()
    return orig
}

func GenTest{{ .messageName }}Slice() []{{ .messageName }} {
    orig := make([]{{ .messageName }}, 5)
    orig[1] = *GenTest{{ .messageName }}()
    orig[3] = *GenTest{{ .messageName }}()
    return orig
}
