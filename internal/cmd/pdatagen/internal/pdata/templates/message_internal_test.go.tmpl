// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	{{ range $index, $element := .testImports -}}
	{{ $element }}
	{{ end }}
    "strconv"
)

func TestCopyOrig{{ .originName }}(t *testing.T) {
	src := NewOrigPtr{{ .originName }}()
	dest := NewOrigPtr{{ .originName }}()
	CopyOrig{{ .originName }}(dest, src)
	assert.Equal(t, NewOrigPtr{{ .originName }}(), dest)
    *src = *GenTestOrig{{ .originName }}()
	CopyOrig{{ .originName }}(dest, src)
	assert.Equal(t, src, dest)
}

func TestMarshalAndUnmarshalJSONOrig{{ .originName }}Unknown(t *testing.T) {
	iter := json.BorrowIterator([]byte(`{"unknown": "string"}`))
	defer json.ReturnIterator(iter)
	dest := NewOrigPtr{{ .originName }}()
	UnmarshalJSONOrig{{ .originName }}(dest, iter)
	require.NoError(t, iter.Error())
	assert.Equal(t, NewOrigPtr{{ .originName }}(), dest)
}

func TestMarshalAndUnmarshalJSONOrig{{ .originName }}(t *testing.T) {
	for name, src := range genTestEncodingValues{{ .originName }}() {
		t.Run(name, func(t *testing.T) {
			stream := json.BorrowStream(nil)
			defer json.ReturnStream(stream)
			MarshalJSONOrig{{ .originName }}(src, stream)
			require.NoError(t, stream.Error())

			iter := json.BorrowIterator(stream.Buffer())
			defer json.ReturnIterator(iter)
			dest := NewOrigPtr{{ .originName }}()
			UnmarshalJSONOrig{{ .originName }}(dest, iter)
			require.NoError(t, iter.Error())

			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoOrig{{ .originName }}Failing(t *testing.T) {
    for name, buf := range genTestFailingUnmarshalProtoValues{{ .originName }}() {
        t.Run(name, func(t *testing.T) {
            dest := NewOrigPtr{{ .originName }}()
            require.Error(t, UnmarshalProtoOrig{{ .originName }}(dest, buf))
        })
    }
}

func TestMarshalAndUnmarshalProtoOrig{{ .originName }}Unknown(t *testing.T) {
	dest := NewOrigPtr{{ .originName }}()
	// message Test { required int64 field = 1313; } encoding { "field": "1234" }
	require.NoError(t, UnmarshalProtoOrig{{ .originName }}(dest, []byte{0x88, 0x52, 0xD2, 0x09}))
	assert.Equal(t, NewOrigPtr{{ .originName }}(), dest)
}

func TestMarshalAndUnmarshalProtoOrig{{ .originName }}(t *testing.T) {
	for name, src := range genTestEncodingValues{{ .originName }}(){
		t.Run(name, func(t *testing.T) {
			buf := make([]byte, SizeProtoOrig{{ .originName }}(src))
			gotSize := MarshalProtoOrig{{ .originName }}(src, buf)
			assert.Equal(t, len(buf), gotSize)

			dest := NewOrigPtr{{ .originName }}()
			require.NoError(t, UnmarshalProtoOrig{{ .originName }}(dest, buf))
			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoViaProtobuf{{ .originName }}(t *testing.T) {
	for name, src := range genTestEncodingValues{{ .originName }}(){
		t.Run(name, func(t *testing.T) {
			buf := make([]byte, SizeProtoOrig{{ .originName }}(src))
			gotSize := MarshalProtoOrig{{ .originName }}(src, buf)
			assert.Equal(t, len(buf), gotSize)

			goDest := &go{{ .originFullName }}{}
			require.NoError(t, proto.Unmarshal(buf, goDest))

			goBuf, err := proto.Marshal(goDest)
			require.NoError(t, err)

			dest := NewOrigPtr{{ .originName }}()
			require.NoError(t, UnmarshalProtoOrig{{ .originName }}(dest, goBuf))
			assert.Equal(t, src, dest)
		})
	}
}

func genTestFailingUnmarshalProtoValues{{ .originName }}() map[string][]byte {
    return map[string][]byte{
		"invalid_field": { 0x02 },
        {{- range .fields }}{{ .GenerateTestFailingUnmarshalProtoValues $.messageStruct }}{{- end }}
    }
}

func genTestEncodingValues{{ .originName }}() map[string]*{{ .originFullName }} {
	return map[string]*{{ .originFullName }}{
		"empty": NewOrigPtr{{ .originName }}(),
		{{- range .fields }}{{ .GenerateTestEncodingValues $.messageStruct }}{{- end }}
	}
}
