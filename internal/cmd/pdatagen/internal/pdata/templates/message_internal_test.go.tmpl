// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	{{ range $index, $element := .testImports -}}
	{{ $element }}
	{{ end }}
)

func TestCopy{{ .originName }}(t *testing.T) {
    for name, src := range genTestEncodingValues{{ .originName }}() {
        for _, pooling := range []bool{true, false} {
            t.Run(name+"/Pooling="+strconv.FormatBool(pooling), func(t *testing.T) {
                prevPooling := UseProtoPooling.IsEnabled()
                require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), pooling))
                defer func() {
                    require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), prevPooling))
                }()

                dest := New{{ .originName }}()
                Copy{{ .originName }}(dest, src)
                assert.Equal(t, src, dest)
                Copy{{ .originName }}(dest, dest)
                assert.Equal(t, src, dest)
            })
        }
    }
}

func TestMarshalAndUnmarshalJSON{{ .originName }}Unknown(t *testing.T) {
	iter := json.BorrowIterator([]byte(`{"unknown": "string"}`))
	defer json.ReturnIterator(iter)
	dest := New{{ .originName }}()
	UnmarshalJSON{{ .originName }}(dest, iter)
	require.NoError(t, iter.Error())
	assert.Equal(t, New{{ .originName }}(), dest)
}

func TestMarshalAndUnmarshalJSON{{ .originName }}(t *testing.T) {
	for name, src := range genTestEncodingValues{{ .originName }}() {
        for _, pooling := range []bool{true, false} {
            t.Run(name+"/Pooling="+strconv.FormatBool(pooling), func(t *testing.T) {
                prevPooling := UseProtoPooling.IsEnabled()
                require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), pooling))
                defer func() {
                    require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), prevPooling))
                }()

                stream := json.BorrowStream(nil)
                defer json.ReturnStream(stream)
                MarshalJSON{{ .originName }}(src, stream)
                require.NoError(t, stream.Error())

                iter := json.BorrowIterator(stream.Buffer())
                defer json.ReturnIterator(iter)
                dest := New{{ .originName }}()
                UnmarshalJSON{{ .originName }}(dest, iter)
                require.NoError(t, iter.Error())

                assert.Equal(t, src, dest)
                Delete{{ .originName }}(dest, true)
            })
        }
	}
}

func TestMarshalAndUnmarshalProto{{ .originName }}Failing(t *testing.T) {
    for name, buf := range genTestFailingUnmarshalProtoValues{{ .originName }}() {
        t.Run(name, func(t *testing.T) {
            dest := New{{ .originName }}()
            require.Error(t, UnmarshalProto{{ .originName }}(dest, buf))
        })
    }
}

func TestMarshalAndUnmarshalProto{{ .originName }}Unknown(t *testing.T) {
	dest := New{{ .originName }}()
	// message Test { required int64 field = 1313; } encoding { "field": "1234" }
	require.NoError(t, UnmarshalProto{{ .originName }}(dest, []byte{0x88, 0x52, 0xD2, 0x09}))
	assert.Equal(t, New{{ .originName }}(), dest)
}

func TestMarshalAndUnmarshalProto{{ .originName }}(t *testing.T) {
	for name, src := range genTestEncodingValues{{ .originName }}(){
        for _, pooling := range []bool{true, false} {
            t.Run(name+"/Pooling="+strconv.FormatBool(pooling), func(t *testing.T) {
                prevPooling := UseProtoPooling.IsEnabled()
                require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), pooling))
                defer func() {
                    require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), prevPooling))
                }()

                buf := make([]byte, SizeProto{{ .originName }}(src))
                gotSize := MarshalProto{{ .originName }}(src, buf)
                assert.Equal(t, len(buf), gotSize)

                dest := New{{ .originName }}()
                require.NoError(t, UnmarshalProto{{ .originName }}(dest, buf))

                assert.Equal(t, src, dest)
                Delete{{ .originName }}(dest, true)
            })
        }
	}
}

func TestMarshalAndUnmarshalProtoViaProtobuf{{ .originName }}(t *testing.T) {
	for name, src := range genTestEncodingValues{{ .originName }}(){
		t.Run(name, func(t *testing.T) {
            buf := make([]byte, SizeProto{{ .originName }}(src))
            gotSize := MarshalProto{{ .originName }}(src, buf)
            assert.Equal(t, len(buf), gotSize)

            goDest := &go{{ .originFullName }}{}
            require.NoError(t, proto.Unmarshal(buf, goDest))

            goBuf, err := proto.Marshal(goDest)
            require.NoError(t, err)

            dest := New{{ .originName }}()
            require.NoError(t, UnmarshalProto{{ .originName }}(dest, goBuf))
            assert.Equal(t, src, dest)
        })
	}
}

func genTestFailingUnmarshalProtoValues{{ .originName }}() map[string][]byte {
    return map[string][]byte{
		"invalid_field": { 0x02 },
        {{- range .fields }}{{ .GenerateTestFailingUnmarshalProtoValues $.messageStruct }}{{- end }}
    }
}

func genTestEncodingValues{{ .originName }}() map[string]*{{ .originFullName }} {
	return map[string]*{{ .originFullName }}{
		"empty": New{{ .originName }}(),
		{{- range .fields }}{{ .GenerateTestEncodingValues $.messageStruct }}{{- end }}
	}
}
