// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	{{ range $index, $element := .imports -}}
	{{ $element }}
	{{ end }}
)
{{ if .hasWrapper }}

type {{ .structName }} struct {
	orig *[]{{ if .elementNullable }}*{{ end }}{{ .elementOriginFullName }}
	state *State
}

func GetOrig{{ .structName }}(ms {{ .structName }}) *[]{{ if .elementNullable }}*{{ end }}{{ .elementOriginFullName }} {
	return ms.orig
}

func Get{{ .structName }}State(ms {{ .structName }}) *State {
	return ms.state
}

func New{{ .structName }}(orig *[]{{ if .elementNullable }}*{{ end }}{{ .elementOriginFullName }}, state *State) {{ .structName }} {
	return {{ .structName }}{orig: orig, state: state}
}

func GenerateTest{{ .structName }}() {{ .structName }} {
	orig := GenerateOrigTest{{ .elementOriginName }}Slice()
	return New{{ .structName }}(&orig, NewState())
}
{{ end }}

func CopyOrig{{ .elementOriginName }}Slice(dest, src []{{ if .elementNullable }}*{{ end }}{{ .elementOriginFullName }}) []{{ if .elementNullable }}*{{ end }}{{ .elementOriginFullName }} {
	var newDest []{{ if .elementNullable }}*{{ end }}{{ .elementOriginFullName }}
	if cap(dest) < len(src) {
		{{ if .elementNullable -}}
		newDest = make([]*{{ .elementOriginFullName }}, len(src))
		// Copy old pointers to re-use.
		copy(newDest, dest)
		// Add new pointers for missing elements from len(dest) to len(srt).
		for i := len(dest); i < len(src); i++ {
			newDest[i] = NewOrig{{ .elementOriginName }}()
		}{{ else -}}
		newDest = make([]{{ .elementOriginFullName }}, len(src))
        {{- end }}
	} else {
		newDest = dest[:len(src)]
		// Cleanup the rest of the elements so GC can free the memory.
		// This can happen when len(src) < len(dest) < cap(dest).
		{{ if .elementNullable -}}
		for i := len(src); i < len(dest); i++ {
			dest[i] = nil
		}
		// Add new pointers for missing elements.
		// This can happen when len(dest) < len(src) < cap(dest).
		for i := len(dest); i < len(src); i++ {
			newDest[i] = NewOrig{{ .elementOriginName }}()
		}{{ else -}}
		for i := len(src); i < len(dest); i++ {
			dest[i].Reset()
		}
        {{- end }}
	}
	for i := range src {
	    CopyOrig{{ .elementOriginName }}({{ if not .elementNullable }}&{{ end }}newDest[i], {{ if not .elementNullable }}&{{ end }}src[i])
	}
	return newDest
}

func GenerateOrigTest{{ .elementOriginName }}Slice() []{{ if .elementNullable }}*{{ end }}{{ .elementOriginFullName }} {
    {{ if .elementNullable -}}
    orig := make([]*{{ .elementOriginFullName }}, 5)
	orig[0] = NewOrig{{ .elementOriginName }}()
	orig[1] = GenTestOrig{{ .elementOriginName }}()
    orig[2] = NewOrig{{ .elementOriginName }}()
	orig[3] = GenTestOrig{{ .elementOriginName }}()
    orig[4] = NewOrig{{ .elementOriginName }}(){{ else -}}
    orig := make([]{{ .elementOriginFullName }}, 5)
    orig[1] = *GenTestOrig{{ .elementOriginName }}()
    orig[3] = *GenTestOrig{{ .elementOriginName }}()
    {{- end }}
	return orig
}
