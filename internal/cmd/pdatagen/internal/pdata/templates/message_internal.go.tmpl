// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	{{ range $index, $element := .imports -}}
	{{ $element }}
	{{ end }}
)
{{ if .hasWrapper }}

type {{ .structName }} struct {
	orig *{{ .originFullName }}
	state *State
}

func GetOrig{{ .structName }}(ms {{ .structName }}) *{{ .originFullName }} {
	return ms.orig
}

func Get{{ .structName }}State(ms {{ .structName }}) *State {
	return ms.state
}

func New{{ .structName }}(orig *{{ .originFullName }}, state *State) {{ .structName }} {
	return {{ .structName }}{orig: orig, state: state}
}

{{ end }}

var protoPool{{ .originName }} = sync.Pool{
    New: func() any {
        return &{{ .originFullName }}{}
    },
}

func NewOrig{{ .originName }}() *{{ .originFullName }} {
    if !UseProtoPooling.IsEnabled() {
        return &{{ .originFullName }}{}
    }
    return protoPool{{ .originName }}.Get().(*{{ .originFullName }})
}

func DeleteOrig{{ .originName }}(orig *{{ .originFullName }}, nullable bool) {
    if orig == nil {
        return
    }

    if !UseProtoPooling.IsEnabled() {
        orig.Reset()
        return
    }

    {{ range .fields }}{{ .GenerateDeleteOrig $.messageStruct }}{{ end }}
    orig.Reset()
	if nullable {
        protoPool{{ .originName }}.Put(orig)
    }
}

func CopyOrig{{ .originName }}(dest, src *{{ .originFullName }}) {
	{{- range .fields }}
	{{ .GenerateCopyOrig $.messageStruct }}
	{{- end }}
}

func GenTestOrig{{ .originName }}() *{{ .originFullName }} {
	orig := NewOrig{{ .originName }}()
	{{- range .fields }}
	{{ .GenerateTestValue $.messageStruct }}
	{{- end }}
	return orig
}

// MarshalJSONOrig marshals all properties from the current struct to the destination stream.
func MarshalJSONOrig{{ .originName }}(orig *{{ .originFullName }}, dest *json.Stream) {
	dest.WriteObjectStart()
	{{ range .fields -}}
	{{ .GenerateMarshalJSON $.messageStruct }}
	{{ end -}}
	dest.WriteObjectEnd()
}

// UnmarshalJSONOrig{{ .structName }} unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrig{{ .originName }}(orig *{{ .originFullName }}, iter *json.Iterator) {
	for f := iter.ReadObject(); f != ""; f = iter.ReadObject() {
		switch f {
		{{ range .fields -}}
		{{ .GenerateUnmarshalJSON $.messageStruct }}
		{{ end -}}
		default:
			iter.Skip()
		}
	}
}

func SizeProtoOrig{{ .originName }}(orig *{{ .originFullName }}) int {
	var n int
	var l int
	_ = l
	{{ range .fields -}}
	{{ .GenerateSizeProto $.messageStruct }}
	{{ end -}}
	return n
}

func MarshalProtoOrig{{ .originName }}(orig *{{ .originFullName }}, buf []byte) int {
	pos := len(buf)
	var l int
	_ = l
	{{ range .fields -}}
	{{ .GenerateMarshalProto $.messageStruct }}
	{{ end -}}
	return len(buf) - pos
}

func UnmarshalProtoOrig{{ .originName }}(orig *{{ .originFullName }}, buf []byte) error {
	var err error
	var fieldNum int32
	var wireType proto.WireType

	l := len(buf)
	pos := 0
	for pos < l {
		// If in a group parsing, move to the next tag.
		fieldNum, wireType, pos, err = proto.ConsumeTag(buf, pos)
		if err != nil {
			return err
		}
		switch fieldNum {
			{{ range .fields -}}
			{{ .GenerateUnmarshalProto $.messageStruct }}
			{{ end -}}
			default:
				pos, err = proto.ConsumeUnknown(buf, pos, wireType)
				if err != nil {
					return err
				}
		}
	}
	return nil
}
