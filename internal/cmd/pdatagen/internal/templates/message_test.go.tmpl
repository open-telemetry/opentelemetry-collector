// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package {{ .packageName }}

import (
	{{ range $index, $element := .testImports -}}
	{{ $element }}
	{{ end }}
)

func Test{{ .structName }}_MoveTo(t *testing.T) {
	ms := generateTest{{ .structName }}()
	dest := New{{ .structName }}()
	ms.MoveTo(dest)
	assert.Equal(t, New{{ .structName }}(), ms)
	assert.Equal(t, generateTest{{ .structName }}(), dest)
	dest.MoveTo(dest)
	assert.Equal(t, generateTest{{ .structName }}(), dest)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.MoveTo(new{{ .structName }}(&{{ .originFullName }}{}, &sharedState)) })
	assert.Panics(t, func() { new{{ .structName }}(&{{ .originFullName }}{}, &sharedState).MoveTo(dest) })
}

func Test{{ .structName }}_CopyTo(t *testing.T) {
	ms := New{{ .structName }}()
	orig := New{{ .structName }}()
	orig.CopyTo(ms)
	assert.Equal(t, orig, ms)
	orig = generateTest{{ .structName }}()
	orig.CopyTo(ms)
	assert.Equal(t, orig, ms)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.CopyTo(new{{ .structName }}(&{{ .originFullName }}{}, &sharedState)) })
}

{{ range .fields }}
{{ .GenerateAccessorsTest $.messageStruct }}
{{ end }}

func generateTest{{ .structName }}() {{ .structName }} {
    {{- if .hasWrapper }}
    return {{ .structName }}(internal.GenerateTest{{ .structName }}())
    {{- else }}
	ms := New{{ .structName }}()
	internal.FillOrigTest{{ .originName }}(ms.orig)
	return ms
	{{- end }}
}
