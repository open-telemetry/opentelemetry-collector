// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package {{ .packageName }}

import (
	{{ range $index, $element := .testImports -}}
	{{ $element }}
	{{ end }}
)

func Test{{ .structName }}_MoveTo(t *testing.T) {
	ms := generateTest{{ .structName }}()
	dest := New{{ .structName }}()
	ms.MoveTo(dest)
	assert.Equal(t, New{{ .structName }}(), ms)
	assert.Equal(t, generateTest{{ .structName }}(), dest)
	dest.MoveTo(dest)
	assert.Equal(t, generateTest{{ .structName }}(), dest)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.MoveTo(new{{ .structName }}(&{{ .originName }}{}, &sharedState)) })
	assert.Panics(t, func() { new{{ .structName }}(&{{ .originName }}{}, &sharedState).MoveTo(dest) })
}

func Test{{ .structName }}_CopyTo(t *testing.T) {
	ms := New{{ .structName }}()
	orig := New{{ .structName }}()
	orig.CopyTo(ms)
	assert.Equal(t, orig, ms)
	orig = generateTest{{ .structName }}()
	orig.CopyTo(ms)
	assert.Equal(t, orig, ms)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.CopyTo(new{{ .structName }}(&{{ .originName }}{}, &sharedState)) })
}

func Test{{ .structName }}_MarshalAndUnmarshalJSON(t *testing.T) {
	stream := json.BorrowStream(nil)
	defer json.ReturnStream(stream)
	src := generateTest{{ .structName }}()
	{{- if .isCommon }}
	internal.MarshalJSONStream{{ .structName }}(internal.{{ .structName }}(src), stream)
	{{- else }}
	src.marshalJSONStream(stream)
	{{- end }}
	require.NoError(t, stream.Error())

	// Append an unknown field at the start to ensure unknown fields are skipped
	// and the unmarshal logic continues.
	buf := stream.Buffer()
	assert.EqualValues(t, '{', buf[0])
	iter := json.BorrowIterator(append([]byte(`{"unknown": "string",`), buf[1:]...))
	defer json.ReturnIterator(iter)
	dest := New{{ .structName }}()
	{{- if .isCommon }}
	internal.UnmarshalJSONIter{{ .structName }}(internal.{{ .structName }}(dest), iter)
	{{- else }}
	dest.unmarshalJSONIter(iter)
	{{- end }}
	require.NoError(t, iter.Error())

	assert.Equal(t, src, dest)
}

{{ range .fields }}
{{ .GenerateAccessorsTest $.messageStruct }}
{{ end }}

func generateTest{{ .structName }}() {{ .structName }} {
    {{- if .isCommon }}
    return {{ .structName }}(internal.GenerateTest{{ .structName }}())
    {{- else }}
	tv := New{{ .structName }}()
	fillTest{{ .structName }}(tv)
	return tv
	{{- end }}
}

{{ if not .isCommon -}}
func fillTest{{ .structName }}(tv {{ .structName }}) {
	{{- range .fields }}
	{{ .GenerateSetWithTestValue $.messageStruct }}
	{{- end }}
}
{{ end }}
