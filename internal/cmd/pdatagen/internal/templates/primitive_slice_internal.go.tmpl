// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	{{ range $index, $element := .imports -}}
	{{ if ne $element "go.opentelemetry.io/collector/pdata/internal" }}
	{{ $element }}
	{{- end }}
	{{- end }}
)

type {{ .structName }} struct {
	orig *[]{{ .itemType }}
	state *State
}

func GetOrig{{ .structName }}(ms {{ .structName }}) *[]{{ .itemType }} {
	return ms.orig
}

func Get{{ .structName }}State(ms {{ .structName }}) *State {
	return ms.state
}

func New{{ .structName }}(orig *[]{{ .itemType }}, state *State) {{ .structName }} {
	return {{ .structName }}{orig: orig, state: state}
}

func GenerateTest{{ .structName }}() {{ .structName }} {
	orig := GenerateOrigTest{{ .elementOriginName }}Slice()
	state := StateMutable
	return New{{ .structName }}(&orig, &state)
}

// MarshalJSONStream{{ .structName }} marshals all properties from the current struct to the destination stream.
func MarshalJSONStream{{ .structName }}(ms {{ .structName }}, dest *json.Stream) {
	{{- if eq .itemType "byte" }}
	dest.WriteString(base64.StdEncoding.EncodeToString(*ms.orig))
	{{- else }}
	dest.WriteArrayStart()
	if len(*ms.orig) > 0 {
		dest.Write{{ upperFirst .itemType }}((*ms.orig)[0])
	}
	for i := 1; i < len((*ms.orig)); i++ {
		dest.WriteMore()
		dest.Write{{ upperFirst .itemType }}((*ms.orig)[i])
	}
	dest.WriteArrayEnd()
	{{- end }}
}

// UnmarshalJSONIter{{ .structName }} unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONIter{{ .structName }}(ms {{ .structName }}, iter *json.Iterator) {
	{{- if eq .itemType "byte" }}
	buf := iter.ReadStringAsSlice()
	*ms.orig = make([]byte, base64.StdEncoding.DecodedLen(len(buf)))
	n, err := base64.StdEncoding.Decode(*ms.orig, buf)
	if err != nil {
		iter.ReportError("base64.Decode", err.Error())
	}
	*ms.orig = (*ms.orig)[:n]
	{{- else }}
	iter.ReadArrayCB(func(iter *json.Iterator) bool {
		*ms.orig = append(*ms.orig, iter.Read{{ upperFirst .itemType }}())
		return true
	})
	{{- end }}
}

func CopyOrig{{ .elementOriginName }}Slice(dst, src []{{ .itemType }}) []{{ .itemType }} {
	return append(dst[:0], src...)
}

func GenerateOrigTest{{ .elementOriginName }}Slice() []{{ .itemType }} {
	return []{{ .itemType }}{ {{ .testOrigVal }} }
}