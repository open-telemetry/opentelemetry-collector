// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	{{ range $index, $element := .imports -}}
	{{ if ne $element "go.opentelemetry.io/collector/pdata/internal" }}
	{{ $element }}
	{{- end }}
	{{- end }}
)

type {{ .structName }} struct {
	orig *[]{{ .itemType }}
	state *State
}

func GetOrig{{ .structName }}(ms {{ .structName }}) *[]{{ .itemType }} {
	return ms.orig
}

func Get{{ .structName }}State(ms {{ .structName }}) *State {
	return ms.state
}

func New{{ .structName }}(orig *[]{{ .itemType }}, state *State) {{ .structName }} {
	return {{ .structName }}{orig: orig, state: state}
}

func GenerateTest{{ .structName }}() {{ .structName }} {
	orig := GenerateOrigTest{{ .elementOriginName }}Slice()
	state := StateMutable
	return New{{ .structName }}(&orig, &state)
}

func CopyOrig{{ .elementOriginName }}Slice(dst, src []{{ .itemType }}) []{{ .itemType }} {
	return append(dst[:0], src...)
}

func GenerateOrigTest{{ .elementOriginName }}Slice() []{{ .itemType }} {
	return []{{ .itemType }}{ {{ .testOrigVal }} }
}

// MarshalJSONOrig{{ .elementOriginName }}Slice marshals all properties from the current struct to the destination stream.
func MarshalJSONOrig{{ .elementOriginName }}Slice(orig []{{ .itemType }}, dest *json.Stream) {
	{{- if eq .itemType "byte" }}
	dest.WriteString(base64.StdEncoding.EncodeToString(orig))
	{{- else }}
	dest.WriteArrayStart()
	if len(orig) > 0 {
		dest.Write{{ upperFirst .itemType }}(orig[0])
	}
	for i := 1; i < len(orig); i++ {
		dest.WriteMore()
		dest.Write{{ upperFirst .itemType }}(orig[i])
	}
	dest.WriteArrayEnd()
	{{- end }}
}

// UnmarshalJSONOrig{{ .elementOriginName }}Slice unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrig{{ .elementOriginName }}Slice(iter *json.Iterator) []{{ .itemType }}{
	{{- if eq .itemType "byte" }}
	buf := iter.ReadStringAsSlice()
	orig := make([]byte, base64.StdEncoding.DecodedLen(len(buf)))
	n, err := base64.StdEncoding.Decode(orig, buf)
	if err != nil {
		iter.ReportError("base64.Decode", err.Error())
	}
	orig = orig[:n]
	{{- else }}
	var orig []{{ .itemType }}
	iter.ReadArrayCB(func(iter *json.Iterator) bool {
		orig = append(orig, iter.Read{{ upperFirst .itemType }}())
		return true
	})
	{{- end }}
	return orig
}
