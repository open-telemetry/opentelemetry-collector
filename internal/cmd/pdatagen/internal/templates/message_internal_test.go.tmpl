// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	{{ range $index, $element := .testImports -}}
	{{ $element }}
	{{ end }}
)

func TestCopyOrig{{ .originName }}(t *testing.T) {
	src := &{{ .originFullName }}{}
	dest := &{{ .originFullName }}{}
	CopyOrig{{ .originName }}(dest, src)
	assert.Equal(t, &{{ .originFullName }}{}, dest)
	FillOrigTest{{ .originName }}(src)
	CopyOrig{{ .originName }}(dest, src)
	assert.Equal(t, src, dest)
}

func TestMarshalAndUnmarshalJSONOrig{{ .originName }}Unknown(t *testing.T) {
	iter := json.BorrowIterator([]byte(`{"unknown": "string"}`))
	defer json.ReturnIterator(iter)
	dest := &{{ .originFullName }}{}
	UnmarshalJSONOrig{{ .originName }}(dest, iter)
	require.NoError(t, iter.Error())
	assert.Equal(t, &{{ .originFullName }}{}, dest)
}

func TestMarshalAndUnmarshalJSONOrig{{ .originName }}(t *testing.T) {
	for name, src := range getEncodingTestValues{{ .originName }}() {
		t.Run(name, func(t *testing.T) {
			stream := json.BorrowStream(nil)
			defer json.ReturnStream(stream)
			MarshalJSONOrig{{ .originName }}(src, stream)
			require.NoError(t, stream.Error())

			iter := json.BorrowIterator(stream.Buffer())
			defer json.ReturnIterator(iter)
			dest := &{{ .originFullName }}{}
			UnmarshalJSONOrig{{ .originName }}(dest, iter)
			require.NoError(t, iter.Error())

			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoOrig{{ .originName }}(t *testing.T) {
	for name, src := range getEncodingTestValues{{ .originName }}(){
		t.Run(name, func(t *testing.T) {
			buf := make([]byte, SizeProtoOrig{{ .originName }}(src))
			gotSize := MarshalProtoOrig{{ .originName }}(src, buf)
			assert.Equal(t, len(buf), gotSize)

			dest := &{{ .originFullName }}{}
			require.NoError(t, UnmarshalProtoOrig{{ .originName }}(dest, buf))
			assert.Equal(t, src, dest)
		})
	}
}

func getEncodingTestValues{{ .originName }}() map[string]*{{ .originFullName }} {
	return map[string]*{{ .originFullName }}{
		"empty": &{{ .originFullName }}{},
		"fill_test": func() *{{ .originFullName }} {
			src := &{{ .originFullName }}{}
			FillOrigTest{{ .originName }}(src)
			return src
		}(), {{ range .fields -}}{{ .GenerateTestValue $.messageStruct }}{{ end }}
	}
}
