// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	{{ range $index, $element := .testImports -}}
	{{ $element }}
	{{ end }}
)

func TestCopyOrig{{ .originName }}(t *testing.T) {
	src := &{{ .originFullName }}{}
	dest := &{{ .originFullName }}{}
	CopyOrig{{ .originName }}(dest, src)
	assert.Equal(t, &{{ .originFullName }}{}, dest)
	FillOrigTest{{ .originName }}(src)
	CopyOrig{{ .originName }}(dest, src)
	assert.Equal(t, src, dest)
}

func TestMarshalAndUnmarshalJSONOrig{{ .originName }}(t *testing.T) {
	src := &{{ .originFullName }}{}
	FillOrigTest{{ .originName }}(src)
	stream := json.BorrowStream(nil)
	defer json.ReturnStream(stream)
	MarshalJSONOrig{{ .originName }}(src, stream)
	require.NoError(t, stream.Error())

	// Append an unknown field at the start to ensure unknown fields are skipped
	// and the unmarshal logic continues.
	buf := stream.Buffer()
	assert.EqualValues(t, '{', buf[0])
	iter := json.BorrowIterator(append([]byte(`{"unknown": "string",`), buf[1:]...))
	defer json.ReturnIterator(iter)
	dest := &{{ .originFullName }}{}
	UnmarshalJSONOrig{{ .originName }}(dest, iter)
	require.NoError(t, iter.Error())

	assert.Equal(t, src, dest)
}

func TestMarshalAndUnmarshalProtoOrig{{ .originName }}(t *testing.T) {
	src := &{{ .originFullName }}{}
	FillOrigTest{{ .originName }}(src)
	buf := make([]byte, SizeProtoOrig{{ .originName }}(src))
	gotSize := MarshalProtoOrig{{ .originName }}(src, buf)
	assert.Equal(t, len(buf), gotSize)

	dest := &{{ .originFullName }}{}
	require.NoError(t, UnmarshalProtoOrig{{ .originName }}(dest, buf))
	assert.Equal(t, src, dest)
}

func TestMarshalAndUnmarshalProtoOrigEmpty{{ .originName }}(t *testing.T) {
	src := &{{ .originFullName }}{}
	buf := make([]byte, SizeProtoOrig{{ .originName }}(src))
	gotSize := MarshalProtoOrig{{ .originName }}(src, buf)
	assert.Equal(t, len(buf), gotSize)

	dest := &{{ .originFullName }}{}
	require.NoError(t, UnmarshalProtoOrig{{ .originName }}(dest, buf))
	assert.Equal(t, src, dest)
}
