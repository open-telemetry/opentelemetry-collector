// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	{{ range $index, $element := .imports -}}
	{{ if ne $element "go.opentelemetry.io/collector/pdata/internal" }}
	{{ $element }}
	{{- end }}
	{{- end }}
)
{{ if .isCommon }}

type {{ .structName }} struct {
	orig *[]{{ .originElementType }}
	state *State
}

func GetOrig{{ .structName }}(ms {{ .structName }}) *[]{{ .originElementType }} {
	return ms.orig
}

func Get{{ .structName }}State(ms {{ .structName }}) *State {
	return ms.state
}

func New{{ .structName }}(orig *[]{{ .originElementType }}, state *State) {{ .structName }} {
	return {{ .structName }}{orig: orig, state: state}
}

func GenerateTest{{ .structName }}() {{ .structName }} {
	orig := GenerateOrigTest{{ .elementOriginName }}Slice()
	state := StateMutable
	return New{{ .structName }}(&orig, &state)
}

// MarshalJSONStream{{ .structName }} marshals all properties from the current struct to the destination stream.
func MarshalJSONStream{{ .structName }}(ms {{ .structName }}, dest *json.Stream) {
	dest.WriteArrayStart()
	if len(*ms.orig) > 0 {
		MarshalJSONStream{{ .elementName }}(New{{ .elementName }}({{ .originElementPtr }}(*ms.orig)[0], ms.state), dest)
	}
	for i := 1; i < len((*ms.orig)); i++ {
		dest.WriteMore()
		MarshalJSONStream{{ .elementName }}(New{{ .elementName }}({{ .originElementPtr }}(*ms.orig)[i], ms.state), dest)
	}
	dest.WriteArrayEnd()
}

// UnmarshalJSONIter{{ .structName }} unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONIter{{ .structName }}(ms {{ .structName }}, iter *json.Iterator) {
	iter.ReadArrayCB(func(iter *json.Iterator) bool {
		*ms.orig = append(*ms.orig, {{ .emptyOriginElement }})
		UnmarshalJSONIter{{ .elementName }}(New{{ .elementName }}({{ .originElementPtr }}(*ms.orig)[len(*ms.orig)-1], ms.state), iter)
		return true
	})
}
{{ end }}

func CopyOrig{{ .elementOriginName }}Slice(dest, src []{{ .originElementType }}) []{{ .originElementType }} {
	var newDest []{{ .originElementType }}
	if cap(dest) < len(src) {
		{{- if eq .type "sliceOfPtrs" }}
		newDest = make([]{{ .originElementType }}, len(src))
		// Copy old pointers to re-use.
		copy(newDest, dest)
		// Add new pointers for missing elements from len(dest) to len(srt).
		for i := len(dest); i < len(src); i++ {
			newDest[i] = &{{ .elementOriginFullName }}{}
		}
		{{- else }}
		newDest = make([]{{ .originElementType }}, len(src))
		{{- end }}
	} else {
		newDest = dest[:len(src)]
		// Cleanup the rest of the elements so GC can free the memory.
		// This can happen when len(src) < len(dest) < cap(dest).
		{{- if eq .type "sliceOfPtrs" }}
		for i := len(src); i < len(dest); i++ {
			dest[i] = nil
		}
		// Add new pointers for missing elements.
		// This can happen when len(dest) < len(src) < cap(dest).
		for i := len(dest); i < len(src); i++ {
			newDest[i] = &{{ .elementOriginFullName }}{}
		}
		{{- else }}
		for i := len(src); i < len(dest); i++ {
			dest[i] = {{ .emptyOriginElement }}
		}
		{{- end }}
	}
	for i := range src {
	CopyOrig{{ .elementOriginName }}({{ .originElementPtr }}newDest[i], {{ .originElementPtr }}src[i])
	}
	return newDest
}

func GenerateOrigTest{{ .elementOriginName }}Slice() []{{ .originElementType }} {
	orig := make([]{{ .originElementType }}, 7)
	for i := 0; i < 7; i++ {
		orig[i] = {{ .emptyOriginElement }}
		FillOrigTest{{ .elementOriginName }}({{ .originElementPtr }}orig[i])
	}
	return orig
}
