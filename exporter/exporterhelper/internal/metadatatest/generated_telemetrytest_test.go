// Code generated by mdatagen. DO NOT EDIT.

package metadatatest

import (
	"context"
	"testing"

	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/sdk/metric/metricdata"
	"go.opentelemetry.io/otel/sdk/metric/metricdata/metricdatatest"

	"go.opentelemetry.io/collector/component/componenttest"
	"go.opentelemetry.io/collector/exporter/exporterhelper/internal/metadata"
	"go.opentelemetry.io/collector/featuregate"
)

func TestSetupTelemetry(t *testing.T) {
	var gate *featuregate.Gate
	featuregate.GlobalRegistry().VisitAll(func(g *featuregate.Gate) {
		if g.ID() == "telemetry.ownMetricsUsePeriodPrefix" {
			gate = g
		}
	})
	require.NotNil(t, gate)

	initialValue := gate.IsEnabled()
	defer func() {
		_ = featuregate.GlobalRegistry().Set("telemetry.ownMetricsUsePeriodPrefix", initialValue)
	}()

	_ = featuregate.GlobalRegistry().Set("telemetry.ownMetricsUsePeriodPrefix", true)
	testSetupTelemetry(t)

	_ = featuregate.GlobalRegistry().Set("telemetry.ownMetricsUsePeriodPrefix", false)
	testSetupTelemetry(t)
}

func testSetupTelemetry(t *testing.T) {
	testTel := componenttest.NewTelemetry()
	tb, err := metadata.NewTelemetryBuilder(testTel.NewTelemetrySettings())
	require.NoError(t, err)
	defer tb.Shutdown()
	require.NoError(t, tb.RegisterExporterQueueCapacityCallback(func(_ context.Context, observer metric.Int64Observer) error {
		observer.Observe(1)
		return nil
	}))
	require.NoError(t, tb.RegisterExporterQueueSizeCallback(func(_ context.Context, observer metric.Int64Observer) error {
		observer.Observe(1)
		return nil
	}))
	tb.ExporterEnqueueFailedLogRecords.Add(context.Background(), 1)
	tb.ExporterEnqueueFailedMetricPoints.Add(context.Background(), 1)
	tb.ExporterEnqueueFailedSpans.Add(context.Background(), 1)
	tb.ExporterSendFailedLogRecords.Add(context.Background(), 1)
	tb.ExporterSendFailedMetricPoints.Add(context.Background(), 1)
	tb.ExporterSendFailedSpans.Add(context.Background(), 1)
	tb.ExporterSentLogRecords.Add(context.Background(), 1)
	tb.ExporterSentMetricPoints.Add(context.Background(), 1)
	tb.ExporterSentSpans.Add(context.Background(), 1)
	AssertEqualExporterEnqueueFailedLogRecords(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualExporterEnqueueFailedMetricPoints(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualExporterEnqueueFailedSpans(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualExporterQueueCapacity(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualExporterQueueSize(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualExporterSendFailedLogRecords(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualExporterSendFailedMetricPoints(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualExporterSendFailedSpans(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualExporterSentLogRecords(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualExporterSentMetricPoints(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualExporterSentSpans(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())

	require.NoError(t, testTel.Shutdown(context.Background()))
}
