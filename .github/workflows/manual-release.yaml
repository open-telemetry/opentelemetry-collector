name: Mirror and Retag OpenTelemetry Collector

on:
  push:
  workflow_dispatch:
    inputs:
      source_version:
        description: 'Source OpenTelemetry Collector version'
        required: true
        default: '0.130.1'
      target_tag:
        description: 'Target tag for the mirrored image'
        required: true
        default: 'branch-0.130.0-nirmata1'

jobs:
  mirror-and-retag:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Set up QEMU for multi-arch
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify source image exists
        run: |
          export ORIGINAL_IMAGE=otel/opentelemetry-collector:${{ github.event.inputs.source_version }}
          echo "Checking if source image exists: $ORIGINAL_IMAGE"
          docker buildx imagetools inspect $ORIGINAL_IMAGE

      - name: Mirror and Retag Multi-Arch Image
        run: |
          export ORIGINAL_IMAGE=otel/opentelemetry-collector:${{ github.event.inputs.source_version }}
          export TARGET_IMAGE=ghcr.io/nirmata/opentelemetry-collector:${{ github.event.inputs.target_tag }}
          
          echo "Mirroring $ORIGINAL_IMAGE to $TARGET_IMAGE"
          
          docker buildx imagetools create \
            --tag $TARGET_IMAGE \
            --platform linux/amd64,linux/arm64 \
            $ORIGINAL_IMAGE

      - name: Verify mirrored image
        run: |
          export TARGET_IMAGE=ghcr.io/nirmata/opentelemetry-collector:${{ github.event.inputs.target_tag }}
          echo "Verifying mirrored image: $TARGET_IMAGE"
          docker buildx imagetools inspect $TARGET_IMAGE
