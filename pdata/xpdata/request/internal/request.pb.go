// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pdata/xpdata/request/internal/request.proto

package internal

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"

	_ "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	v12 "go.opentelemetry.io/collector/pdata/internal/data/protogen/logs/v1"
	v11 "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
	v1development "go.opentelemetry.io/collector/pdata/internal/data/protogen/profiles/v1development"
	v1 "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SpanContext represents a span context encoded associated with a telemetry export request.
type SpanContext struct {
	TraceId    []byte `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId     []byte `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	TraceFlags uint32 `protobuf:"fixed32,3,opt,name=trace_flags,json=traceFlags,proto3" json:"trace_flags,omitempty"`
	TraceState string `protobuf:"bytes,4,opt,name=trace_state,json=traceState,proto3" json:"trace_state,omitempty"`
	Remote     bool   `protobuf:"varint,5,opt,name=remote,proto3" json:"remote,omitempty"`
}

func (m *SpanContext) Reset()         { *m = SpanContext{} }
func (m *SpanContext) String() string { return proto.CompactTextString(m) }
func (*SpanContext) ProtoMessage()    {}
func (*SpanContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_b47c551a6764db21, []int{0}
}
func (m *SpanContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpanContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpanContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpanContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanContext.Merge(m, src)
}
func (m *SpanContext) XXX_Size() int {
	return m.Size()
}
func (m *SpanContext) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanContext.DiscardUnknown(m)
}

var xxx_messageInfo_SpanContext proto.InternalMessageInfo

func (m *SpanContext) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *SpanContext) GetSpanId() []byte {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *SpanContext) GetTraceFlags() uint32 {
	if m != nil {
		return m.TraceFlags
	}
	return 0
}

func (m *SpanContext) GetTraceState() string {
	if m != nil {
		return m.TraceState
	}
	return ""
}

func (m *SpanContext) GetRemote() bool {
	if m != nil {
		return m.Remote
	}
	return false
}

// RequestContext represents metadata associated with a telemetry export request.
type RequestContext struct {
	SpanContext *SpanContext `protobuf:"bytes,1,opt,name=span_context,json=spanContext,proto3" json:"span_context,omitempty"`
}

func (m *RequestContext) Reset()         { *m = RequestContext{} }
func (m *RequestContext) String() string { return proto.CompactTextString(m) }
func (*RequestContext) ProtoMessage()    {}
func (*RequestContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_b47c551a6764db21, []int{1}
}
func (m *RequestContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestContext.Merge(m, src)
}
func (m *RequestContext) XXX_Size() int {
	return m.Size()
}
func (m *RequestContext) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestContext.DiscardUnknown(m)
}

var xxx_messageInfo_RequestContext proto.InternalMessageInfo

func (m *RequestContext) GetSpanContext() *SpanContext {
	if m != nil {
		return m.SpanContext
	}
	return nil
}

type TracesRequest struct {
	FormatVersion  uint32          `protobuf:"fixed32,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	RequestContext *RequestContext `protobuf:"bytes,2,opt,name=request_context,json=requestContext,proto3" json:"request_context,omitempty"`
	TracesData     *v1.TracesData  `protobuf:"bytes,3,opt,name=traces_data,json=tracesData,proto3" json:"traces_data,omitempty"`
}

func (m *TracesRequest) Reset()         { *m = TracesRequest{} }
func (m *TracesRequest) String() string { return proto.CompactTextString(m) }
func (*TracesRequest) ProtoMessage()    {}
func (*TracesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b47c551a6764db21, []int{2}
}
func (m *TracesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracesRequest.Merge(m, src)
}
func (m *TracesRequest) XXX_Size() int {
	return m.Size()
}
func (m *TracesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TracesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TracesRequest proto.InternalMessageInfo

func (m *TracesRequest) GetFormatVersion() uint32 {
	if m != nil {
		return m.FormatVersion
	}
	return 0
}

func (m *TracesRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *TracesRequest) GetTracesData() *v1.TracesData {
	if m != nil {
		return m.TracesData
	}
	return nil
}

type MetricsRequest struct {
	FormatVersion  uint32           `protobuf:"fixed32,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	RequestContext *RequestContext  `protobuf:"bytes,2,opt,name=request_context,json=requestContext,proto3" json:"request_context,omitempty"`
	MetricsData    *v11.MetricsData `protobuf:"bytes,3,opt,name=metrics_data,json=metricsData,proto3" json:"metrics_data,omitempty"`
}

func (m *MetricsRequest) Reset()         { *m = MetricsRequest{} }
func (m *MetricsRequest) String() string { return proto.CompactTextString(m) }
func (*MetricsRequest) ProtoMessage()    {}
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b47c551a6764db21, []int{3}
}
func (m *MetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsRequest.Merge(m, src)
}
func (m *MetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsRequest proto.InternalMessageInfo

func (m *MetricsRequest) GetFormatVersion() uint32 {
	if m != nil {
		return m.FormatVersion
	}
	return 0
}

func (m *MetricsRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *MetricsRequest) GetMetricsData() *v11.MetricsData {
	if m != nil {
		return m.MetricsData
	}
	return nil
}

type LogsRequest struct {
	FormatVersion  uint32          `protobuf:"fixed32,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	RequestContext *RequestContext `protobuf:"bytes,2,opt,name=request_context,json=requestContext,proto3" json:"request_context,omitempty"`
	LogsData       *v12.LogsData   `protobuf:"bytes,3,opt,name=logs_data,json=logsData,proto3" json:"logs_data,omitempty"`
}

func (m *LogsRequest) Reset()         { *m = LogsRequest{} }
func (m *LogsRequest) String() string { return proto.CompactTextString(m) }
func (*LogsRequest) ProtoMessage()    {}
func (*LogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b47c551a6764db21, []int{4}
}
func (m *LogsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogsRequest.Merge(m, src)
}
func (m *LogsRequest) XXX_Size() int {
	return m.Size()
}
func (m *LogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogsRequest proto.InternalMessageInfo

func (m *LogsRequest) GetFormatVersion() uint32 {
	if m != nil {
		return m.FormatVersion
	}
	return 0
}

func (m *LogsRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *LogsRequest) GetLogsData() *v12.LogsData {
	if m != nil {
		return m.LogsData
	}
	return nil
}

type ProfilesRequest struct {
	FormatVersion  uint32                      `protobuf:"fixed32,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	RequestContext *RequestContext             `protobuf:"bytes,2,opt,name=request_context,json=requestContext,proto3" json:"request_context,omitempty"`
	ProfilesData   *v1development.ProfilesData `protobuf:"bytes,3,opt,name=profiles_data,json=profilesData,proto3" json:"profiles_data,omitempty"`
}

func (m *ProfilesRequest) Reset()         { *m = ProfilesRequest{} }
func (m *ProfilesRequest) String() string { return proto.CompactTextString(m) }
func (*ProfilesRequest) ProtoMessage()    {}
func (*ProfilesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b47c551a6764db21, []int{5}
}
func (m *ProfilesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfilesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfilesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfilesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfilesRequest.Merge(m, src)
}
func (m *ProfilesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProfilesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfilesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProfilesRequest proto.InternalMessageInfo

func (m *ProfilesRequest) GetFormatVersion() uint32 {
	if m != nil {
		return m.FormatVersion
	}
	return 0
}

func (m *ProfilesRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *ProfilesRequest) GetProfilesData() *v1development.ProfilesData {
	if m != nil {
		return m.ProfilesData
	}
	return nil
}

func init() {
	proto.RegisterType((*SpanContext)(nil), "opentelemetry.collector.pdata.xpdata.internal.SpanContext")
	proto.RegisterType((*RequestContext)(nil), "opentelemetry.collector.pdata.xpdata.internal.RequestContext")
	proto.RegisterType((*TracesRequest)(nil), "opentelemetry.collector.pdata.xpdata.internal.TracesRequest")
	proto.RegisterType((*MetricsRequest)(nil), "opentelemetry.collector.pdata.xpdata.internal.MetricsRequest")
	proto.RegisterType((*LogsRequest)(nil), "opentelemetry.collector.pdata.xpdata.internal.LogsRequest")
	proto.RegisterType((*ProfilesRequest)(nil), "opentelemetry.collector.pdata.xpdata.internal.ProfilesRequest")
}

func init() {
	proto.RegisterFile("pdata/xpdata/request/internal/request.proto", fileDescriptor_b47c551a6764db21)
}

var fileDescriptor_b47c551a6764db21 = []byte{
	// 567 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x95, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0x01, 0x6d, 0xe7, 0xb4, 0x9d, 0x14, 0x21, 0x28, 0x3b, 0x84, 0x2a, 0xd2, 0x50,
	0xc4, 0xc0, 0x51, 0xb7, 0x0b, 0x20, 0x71, 0x19, 0x08, 0xa9, 0x12, 0x43, 0x28, 0x43, 0x1c, 0x90,
	0xa6, 0xca, 0xa4, 0x6e, 0x14, 0x29, 0x89, 0x83, 0x63, 0xa2, 0xf1, 0x5f, 0x70, 0xe7, 0x1f, 0xe2,
	0xb8, 0x23, 0xc7, 0xa9, 0x3d, 0x71, 0xe2, 0x4f, 0x60, 0xf2, 0xb3, 0xd3, 0x36, 0x53, 0x2e, 0xbb,
	0xf5, 0x94, 0xf7, 0x9e, 0xbf, 0xcf, 0x7e, 0x1f, 0xff, 0x78, 0xc1, 0x87, 0xf9, 0x8c, 0x4a, 0xea,
	0x5f, 0xe8, 0x8f, 0x60, 0xdf, 0xbe, 0xb3, 0x42, 0xfa, 0x71, 0x26, 0x99, 0xc8, 0x68, 0x52, 0x05,
	0x48, 0x2e, 0xb8, 0xe4, 0xf6, 0x73, 0x9e, 0xb3, 0x4c, 0xb2, 0x84, 0xa5, 0x4c, 0x8a, 0x1f, 0x24,
	0xe4, 0x49, 0xc2, 0x42, 0xc9, 0x05, 0x81, 0x6c, 0xa2, 0x27, 0x21, 0x55, 0xf2, 0xfe, 0xfd, 0x88,
	0x47, 0x1c, 0x32, 0x7d, 0x65, 0xe9, 0x49, 0xf6, 0xbd, 0xda, 0x24, 0xbe, 0x1e, 0x97, 0x82, 0x86,
	0xcc, 0x2f, 0xc7, 0xda, 0x30, 0xca, 0x67, 0x4d, 0x4a, 0x65, 0xc7, 0x61, 0xa1, 0xb4, 0xc6, 0x34,
	0xea, 0x27, 0x4d, 0xea, 0x84, 0x47, 0x20, 0x55, 0x5f, 0xa3, 0x7b, 0xda, 0xa4, 0x0b, 0x79, 0x9a,
	0xf2, 0x4c, 0x29, 0xb5, 0x65, 0xb4, 0x2f, 0x9b, 0xb4, 0xb9, 0xe0, 0xf3, 0x38, 0x61, 0x6a, 0xde,
	0x19, 0x2b, 0x59, 0xc2, 0xf3, 0x94, 0x65, 0x72, 0x15, 0xd6, 0xa9, 0xee, 0x2f, 0x84, 0xad, 0xb3,
	0x9c, 0x66, 0x6f, 0x78, 0x26, 0xd9, 0x85, 0xb4, 0x1f, 0xe1, 0x2e, 0xb0, 0x4d, 0xe3, 0xd9, 0x10,
	0x8d, 0x90, 0xd7, 0x0b, 0x3a, 0xe0, 0x4f, 0x66, 0xf6, 0x43, 0xdc, 0x29, 0x72, 0x9a, 0xa9, 0x91,
	0x1d, 0x18, 0x69, 0x2b, 0x77, 0x32, 0xb3, 0x1f, 0x63, 0x4b, 0xe7, 0xcc, 0x13, 0x1a, 0x15, 0xc3,
	0x3b, 0x23, 0xe4, 0x75, 0x02, 0x0c, 0xa1, 0x77, 0x2a, 0xb2, 0x16, 0x14, 0x92, 0x4a, 0x36, 0xbc,
	0x3b, 0x42, 0xde, 0xae, 0x11, 0x9c, 0xa9, 0x88, 0xfd, 0x00, 0xb7, 0x05, 0x4b, 0xb9, 0x64, 0xc3,
	0x7b, 0x23, 0xe4, 0x75, 0x03, 0xe3, 0xb9, 0x1c, 0x0f, 0x02, 0x7d, 0xb4, 0x55, 0x7d, 0xe7, 0xb8,
	0x07, 0x45, 0x84, 0xda, 0x87, 0x1a, 0xad, 0xa3, 0x57, 0xe4, 0x56, 0x47, 0x4e, 0x36, 0x88, 0x03,
	0xab, 0x58, 0x3b, 0xee, 0x5f, 0x84, 0xfb, 0x9f, 0x54, 0x5d, 0x85, 0x59, 0xd7, 0x3e, 0xc0, 0x83,
	0x39, 0x17, 0x29, 0x95, 0xd3, 0x92, 0x89, 0x22, 0xe6, 0x19, 0x2c, 0xd9, 0x09, 0xfa, 0x3a, 0xfa,
	0x59, 0x07, 0xed, 0x39, 0xde, 0x33, 0x97, 0x70, 0x55, 0xda, 0x0e, 0x94, 0xf6, 0xfa, 0x96, 0xa5,
	0xd5, 0x79, 0x83, 0x81, 0xa8, 0xf3, 0x4f, 0xcc, 0x56, 0x16, 0x53, 0x95, 0x06, 0x7b, 0x6d, 0x1d,
	0x79, 0x37, 0xd6, 0x80, 0xa3, 0x25, 0xfa, 0x8e, 0x96, 0x63, 0xa2, 0x81, 0xde, 0x52, 0x49, 0xcd,
	0xa6, 0x83, 0xed, 0xfe, 0x43, 0x78, 0x70, 0xaa, 0xef, 0xe6, 0x96, 0xc2, 0x7e, 0xc0, 0x3d, 0xf3,
	0x78, 0x36, 0x69, 0x0f, 0x1b, 0x69, 0xab, 0x57, 0x56, 0x8e, 0x89, 0x81, 0x02, 0x60, 0x2b, 0x5d,
	0x3b, 0xee, 0x15, 0xc2, 0xd6, 0x7b, 0x1e, 0x6d, 0x2b, 0xee, 0x09, 0xde, 0x55, 0x0d, 0x60, 0x93,
	0xf5, 0xa0, 0x91, 0x15, 0xda, 0x44, 0x39, 0x26, 0x8a, 0x05, 0x28, 0xbb, 0x89, 0xb1, 0xdc, 0xff,
	0x08, 0xef, 0x7d, 0x34, 0x4f, 0x7c, 0x4b, 0x31, 0xcf, 0x71, 0xbf, 0x6a, 0x42, 0x9b, 0xa8, 0x2f,
	0x1a, 0x51, 0x57, 0xed, 0xaa, 0xd6, 0xc5, 0x48, 0x85, 0x08, 0xf4, 0xbd, 0x7c, 0xc3, 0x3b, 0x39,
	0xfd, 0xbd, 0x70, 0xd0, 0xe5, 0xc2, 0x41, 0x57, 0x0b, 0x07, 0xfd, 0x5c, 0x3a, 0xad, 0xcb, 0xa5,
	0xd3, 0xfa, 0xb3, 0x74, 0x5a, 0x5f, 0x8e, 0x23, 0x7e, 0x63, 0x8d, 0x58, 0xb5, 0x54, 0x03, 0xe3,
	0xd7, 0x7e, 0x31, 0x15, 0xcc, 0xd7, 0x36, 0xd4, 0x71, 0x7c, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xad,
	0xa1, 0x3c, 0xeb, 0x82, 0x06, 0x00, 0x00,
}

func (m *SpanContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpanContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Remote {
		i--
		if m.Remote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.TraceState) > 0 {
		i -= len(m.TraceState)
		copy(dAtA[i:], m.TraceState)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.TraceState)))
		i--
		dAtA[i] = 0x22
	}
	if m.TraceFlags != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.TraceFlags))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.SpanId) > 0 {
		i -= len(m.SpanId)
		copy(dAtA[i:], m.SpanId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.SpanId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TraceId) > 0 {
		i -= len(m.TraceId)
		copy(dAtA[i:], m.TraceId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.TraceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpanContext != nil {
		{
			size, err := m.SpanContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TracesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TracesData != nil {
		{
			size, err := m.TracesData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestContext != nil {
		{
			size, err := m.RequestContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FormatVersion != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.FormatVersion))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *MetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MetricsData != nil {
		{
			size, err := m.MetricsData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestContext != nil {
		{
			size, err := m.RequestContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FormatVersion != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.FormatVersion))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *LogsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogsData != nil {
		{
			size, err := m.LogsData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestContext != nil {
		{
			size, err := m.RequestContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FormatVersion != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.FormatVersion))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *ProfilesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfilesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProfilesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProfilesData != nil {
		{
			size, err := m.ProfilesData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestContext != nil {
		{
			size, err := m.RequestContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FormatVersion != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.FormatVersion))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SpanContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TraceId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.SpanId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.TraceFlags != 0 {
		n += 5
	}
	l = len(m.TraceState)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.Remote {
		n += 2
	}
	return n
}

func (m *RequestContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpanContext != nil {
		l = m.SpanContext.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *TracesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FormatVersion != 0 {
		n += 5
	}
	if m.RequestContext != nil {
		l = m.RequestContext.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.TracesData != nil {
		l = m.TracesData.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *MetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FormatVersion != 0 {
		n += 5
	}
	if m.RequestContext != nil {
		l = m.RequestContext.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.MetricsData != nil {
		l = m.MetricsData.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *LogsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FormatVersion != 0 {
		n += 5
	}
	if m.RequestContext != nil {
		l = m.RequestContext.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.LogsData != nil {
		l = m.LogsData.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *ProfilesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FormatVersion != 0 {
		n += 5
	}
	if m.RequestContext != nil {
		l = m.RequestContext.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.ProfilesData != nil {
		l = m.ProfilesData.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func sovRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequest(x uint64) (n int) {
	return sovRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SpanContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceId = append(m.TraceId[:0], dAtA[iNdEx:postIndex]...)
			if m.TraceId == nil {
				m.TraceId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanId = append(m.SpanId[:0], dAtA[iNdEx:postIndex]...)
			if m.SpanId == nil {
				m.SpanId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceFlags", wireType)
			}
			m.TraceFlags = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceFlags = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Remote = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpanContext == nil {
				m.SpanContext = &SpanContext{}
			}
			if err := m.SpanContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TracesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormatVersion", wireType)
			}
			m.FormatVersion = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.FormatVersion = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestContext == nil {
				m.RequestContext = &RequestContext{}
			}
			if err := m.RequestContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TracesData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TracesData == nil {
				m.TracesData = &v1.TracesData{}
			}
			if err := m.TracesData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormatVersion", wireType)
			}
			m.FormatVersion = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.FormatVersion = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestContext == nil {
				m.RequestContext = &RequestContext{}
			}
			if err := m.RequestContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetricsData == nil {
				m.MetricsData = &v11.MetricsData{}
			}
			if err := m.MetricsData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormatVersion", wireType)
			}
			m.FormatVersion = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.FormatVersion = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestContext == nil {
				m.RequestContext = &RequestContext{}
			}
			if err := m.RequestContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogsData == nil {
				m.LogsData = &v12.LogsData{}
			}
			if err := m.LogsData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfilesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfilesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfilesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormatVersion", wireType)
			}
			m.FormatVersion = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.FormatVersion = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestContext == nil {
				m.RequestContext = &RequestContext{}
			}
			if err := m.RequestContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfilesData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProfilesData == nil {
				m.ProfilesData = &v1development.ProfilesData{}
			}
			if err := m.ProfilesData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequest = fmt.Errorf("proto: unexpected end of group")
)
