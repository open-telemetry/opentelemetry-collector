// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: opentelemetry/proto/resource/v1/resource.proto

package v1

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"

	v1 "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Resource information.
type Resource struct {
	// Set of attributes that describe the resource.
	// Attribute keys MUST be unique (it is not allowed to have more than one
	// attribute with the same key).
	Attributes []v1.KeyValue `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes"`
	// dropped_attributes_count is the number of dropped attributes. If the value is 0, then
	// no attributes were dropped.
	DroppedAttributesCount uint32 `protobuf:"varint,2,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"dropped_attributes_count,omitempty"`
	// Set of entities that participate in this Resource.
	Entities []*ResourceEntityRef `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_446f73eacf88f3f5, []int{0}
}
func (m *Resource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return m.Size()
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetAttributes() []v1.KeyValue {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Resource) GetDroppedAttributesCount() uint32 {
	if m != nil {
		return m.DroppedAttributesCount
	}
	return 0
}

func (m *Resource) GetEntities() []*ResourceEntityRef {
	if m != nil {
		return m.Entities
	}
	return nil
}

type ResourceEntityRef struct {
	// The Schema URL, if known. This is the identifier of the Schema that the entity data
	// is recorded in. To learn more about Schema URL see
	// https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
	//
	// This schema_url applies to the data in this message and to the Resource attributes
	// referenced by id_attr_keys and descr_attr_keys.
	// TODO: discuss if we are happy with this somewhat complicated definition of what
	// the schema_url applies to.
	//
	// This field obsoletes the schema_url field in ResourceMetrics/ResourceSpans/ResourceLogs.
	SchemaUrl string `protobuf:"bytes,1,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`
	// Defines the type of the entity. MUST not change during the lifetime of the entity.
	// For example: "service" or "host". This field is required and MUST not be empty
	// for valid entities.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Attribute Keys that identify the entity.
	// MUST not change during the lifetime of the entity. The Id must contain at least one attribute.
	// These keys MUST exist in the containing Resource.attributes.
	IdAttrKeys []string `protobuf:"bytes,3,rep,name=id_attr_keys,json=idAttrKeys,proto3" json:"id_attr_keys,omitempty"`
	// Descriptive (non-identifying) attribute keys of the entity.
	// MAY change over the lifetime of the entity. MAY be empty.
	// These attribute keys are not part of entity's identity.
	// These keys MUST exist in the containing Resource.attributes.
	DescrAttrKeys []string `protobuf:"bytes,4,rep,name=descr_attr_keys,json=descrAttrKeys,proto3" json:"descr_attr_keys,omitempty"`
}

func (m *ResourceEntityRef) Reset()         { *m = ResourceEntityRef{} }
func (m *ResourceEntityRef) String() string { return proto.CompactTextString(m) }
func (*ResourceEntityRef) ProtoMessage()    {}
func (*ResourceEntityRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_446f73eacf88f3f5, []int{1}
}
func (m *ResourceEntityRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceEntityRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceEntityRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceEntityRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceEntityRef.Merge(m, src)
}
func (m *ResourceEntityRef) XXX_Size() int {
	return m.Size()
}
func (m *ResourceEntityRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceEntityRef.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceEntityRef proto.InternalMessageInfo

func (m *ResourceEntityRef) GetSchemaUrl() string {
	if m != nil {
		return m.SchemaUrl
	}
	return ""
}

func (m *ResourceEntityRef) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ResourceEntityRef) GetIdAttrKeys() []string {
	if m != nil {
		return m.IdAttrKeys
	}
	return nil
}

func (m *ResourceEntityRef) GetDescrAttrKeys() []string {
	if m != nil {
		return m.DescrAttrKeys
	}
	return nil
}

func init() {
	proto.RegisterType((*Resource)(nil), "opentelemetry.proto.resource.v1.Resource")
	proto.RegisterType((*ResourceEntityRef)(nil), "opentelemetry.proto.resource.v1.ResourceEntityRef")
}

func init() {
	proto.RegisterFile("opentelemetry/proto/resource/v1/resource.proto", fileDescriptor_446f73eacf88f3f5)
}

var fileDescriptor_446f73eacf88f3f5 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0x8e, 0xd3, 0x30,
	0x14, 0x86, 0xe3, 0x99, 0x0a, 0x4d, 0x0c, 0x15, 0xc2, 0x42, 0x28, 0x1a, 0x89, 0x34, 0xea, 0x02,
	0x2a, 0x16, 0x8e, 0x32, 0x6c, 0xd8, 0x52, 0x04, 0x9b, 0x11, 0x30, 0xb2, 0x60, 0x16, 0x6c, 0xa2,
	0x34, 0x79, 0x04, 0x8b, 0xc4, 0x8e, 0x1c, 0xa7, 0x52, 0x6e, 0xd1, 0x73, 0x70, 0x01, 0xae, 0xd0,
	0x65, 0x97, 0xac, 0x10, 0x6a, 0x2e, 0x82, 0x62, 0xb7, 0xa1, 0x40, 0xa5, 0xee, 0x5e, 0xde, 0xff,
	0xbf, 0xcf, 0xef, 0x77, 0x8c, 0xa9, 0xac, 0x40, 0x68, 0x28, 0xa0, 0x04, 0xad, 0xda, 0xb0, 0x52,
	0x52, 0xcb, 0x50, 0x41, 0x2d, 0x1b, 0x95, 0x42, 0xb8, 0x8c, 0x86, 0x9a, 0x1a, 0x89, 0x4c, 0xfe,
	0xf2, 0xdb, 0x26, 0x1d, 0x3c, 0xcb, 0xe8, 0xf2, 0x61, 0x2e, 0x73, 0x69, 0x31, 0x7d, 0x65, 0x1d,
	0x97, 0xcf, 0x8e, 0x1d, 0x93, 0xca, 0xb2, 0x94, 0xa2, 0x3f, 0xc4, 0x56, 0xd6, 0x3b, 0xed, 0x10,
	0xbe, 0x60, 0x3b, 0x22, 0x79, 0x8b, 0x71, 0xa2, 0xb5, 0xe2, 0x8b, 0x46, 0x43, 0xed, 0xa1, 0xe0,
	0x7c, 0x76, 0xf7, 0xea, 0x29, 0x3d, 0xb6, 0xc4, 0x8e, 0xb1, 0x8c, 0xe8, 0x35, 0xb4, 0xb7, 0x49,
	0xd1, 0xc0, 0x7c, 0xb4, 0xfe, 0x39, 0x71, 0xd8, 0x01, 0x80, 0xbc, 0xc0, 0x5e, 0xa6, 0x64, 0x55,
	0x41, 0x16, 0xff, 0xe9, 0xc6, 0xa9, 0x6c, 0x84, 0xf6, 0xce, 0x02, 0x34, 0x1b, 0xb3, 0x47, 0x3b,
	0xfd, 0xe5, 0x20, 0xbf, 0xea, 0x55, 0xf2, 0x0e, 0x5f, 0x80, 0xd0, 0x5c, 0x73, 0xa8, 0xbd, 0x73,
	0xb3, 0xc6, 0x15, 0x3d, 0x71, 0x17, 0x74, 0x9f, 0xe2, 0x75, 0x3f, 0xd8, 0x32, 0xf8, 0xcc, 0x06,
	0xc6, 0x74, 0x85, 0xf0, 0x83, 0xff, 0x74, 0xf2, 0x18, 0xe3, 0x3a, 0xfd, 0x02, 0x65, 0x12, 0x37,
	0xaa, 0xf0, 0x50, 0x80, 0x66, 0x2e, 0x73, 0x6d, 0xe7, 0xa3, 0x2a, 0x08, 0xc1, 0x23, 0xdd, 0x56,
	0x60, 0x56, 0x75, 0x99, 0xa9, 0x49, 0x80, 0xef, 0x71, 0x9b, 0x26, 0xfe, 0x0a, 0xad, 0x5d, 0xce,
	0x65, 0x98, 0x9b, 0x04, 0xd7, 0xd0, 0xd6, 0xe4, 0x09, 0xbe, 0x9f, 0x41, 0x9d, 0xaa, 0x03, 0xd3,
	0xc8, 0x98, 0xc6, 0xa6, 0xbd, 0xf7, 0xcd, 0xbf, 0xa3, 0xf5, 0xd6, 0x47, 0x9b, 0xad, 0x8f, 0x7e,
	0x6d, 0x7d, 0xb4, 0xea, 0x7c, 0x67, 0xd3, 0xf9, 0xce, 0x8f, 0xce, 0x77, 0xf0, 0x94, 0xcb, 0x53,
	0x69, 0xe7, 0xe3, 0x7d, 0x9c, 0x9b, 0x5e, 0xba, 0x41, 0x9f, 0xde, 0xe4, 0xff, 0x0e, 0xf1, 0xfe,
	0xa7, 0x17, 0x05, 0xa4, 0x5a, 0xaa, 0xb0, 0xca, 0x12, 0x9d, 0x84, 0x5c, 0x68, 0x50, 0x22, 0x29,
	0x42, 0xf3, 0x65, 0xa8, 0x39, 0x88, 0xc3, 0x27, 0xf8, 0xed, 0x6c, 0xf2, 0xbe, 0x02, 0xf1, 0x61,
	0xa0, 0x18, 0xfe, 0x70, 0xb9, 0xf4, 0x36, 0x5a, 0xdc, 0x31, 0x73, 0xcf, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0xbe, 0xbb, 0xb4, 0xae, 0xce, 0x02, 0x00, 0x00,
}

func (m *Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResource(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DroppedAttributesCount != 0 {
		i = encodeVarintResource(dAtA, i, uint64(m.DroppedAttributesCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResource(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResourceEntityRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceEntityRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceEntityRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DescrAttrKeys) > 0 {
		for iNdEx := len(m.DescrAttrKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DescrAttrKeys[iNdEx])
			copy(dAtA[i:], m.DescrAttrKeys[iNdEx])
			i = encodeVarintResource(dAtA, i, uint64(len(m.DescrAttrKeys[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.IdAttrKeys) > 0 {
		for iNdEx := len(m.IdAttrKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IdAttrKeys[iNdEx])
			copy(dAtA[i:], m.IdAttrKeys[iNdEx])
			i = encodeVarintResource(dAtA, i, uint64(len(m.IdAttrKeys[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintResource(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SchemaUrl) > 0 {
		i -= len(m.SchemaUrl)
		copy(dAtA[i:], m.SchemaUrl)
		i = encodeVarintResource(dAtA, i, uint64(len(m.SchemaUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintResource(dAtA []byte, offset int, v uint64) int {
	offset -= sovResource(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Resource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovResource(uint64(l))
		}
	}
	if m.DroppedAttributesCount != 0 {
		n += 1 + sovResource(uint64(m.DroppedAttributesCount))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovResource(uint64(l))
		}
	}
	return n
}

func (m *ResourceEntityRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaUrl)
	if l > 0 {
		n += 1 + l + sovResource(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovResource(uint64(l))
	}
	if len(m.IdAttrKeys) > 0 {
		for _, s := range m.IdAttrKeys {
			l = len(s)
			n += 1 + l + sovResource(uint64(l))
		}
	}
	if len(m.DescrAttrKeys) > 0 {
		for _, s := range m.DescrAttrKeys {
			l = len(s)
			n += 1 + l + sovResource(uint64(l))
		}
	}
	return n
}

func sovResource(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResource(x uint64) (n int) {
	return sovResource(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, v1.KeyValue{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DroppedAttributesCount", wireType)
			}
			m.DroppedAttributesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DroppedAttributesCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &ResourceEntityRef{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceEntityRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceEntityRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceEntityRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdAttrKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdAttrKeys = append(m.IdAttrKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescrAttrKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescrAttrKeys = append(m.DescrAttrKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResource(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResource
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResource
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResource
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResource
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResource        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResource          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResource = fmt.Errorf("proto: unexpected end of group")
)
