// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package {{ .packageName }}

import (
{{ range $index, $element := .testImports -}}
{{ $element }}
{{ end }}
)

func TestNew{{ .structName }}(t *testing.T) {
	ms := New{{ .structName }}()
	assert.Equal(t, 0, ms.Len())
	ms.FromRaw([]{{ .itemType }}{ {{ .testOrigVal }} })
	assert.Equal(t, 3, ms.Len())
	assert.Equal(t, []{{ .itemType }}{ {{ .testOrigVal }} }, ms.AsRaw())
	ms.SetAt(1, {{ .itemType }}( {{ .testSetVal }} ))
	assert.Equal(t, []{{ .itemType }}{ {{ .testNewVal }} }, ms.AsRaw())
	ms.FromRaw([]{{ .itemType }}{ {{ index .testInterfaceOrigVal 2 }} })
	assert.Equal(t, 1, ms.Len())
	{{- if eq .itemType "float64" }}
	assert.InDelta(t, {{ .itemType }}({{ index .testInterfaceOrigVal 2 }}), ms.At(0), 0.01)
	{{- else }}
	assert.Equal(t, {{ .itemType }}({{ index .testInterfaceOrigVal 2 }}), ms.At(0))
	{{- end }}

	cp := New{{ .structName }}()
	ms.CopyTo(cp)
	ms.SetAt(0, {{ .itemType }}( {{ index .testInterfaceOrigVal 1 }} ))
	{{- if eq .itemType "float64" }}
	assert.InDelta(t, {{ .itemType }}({{ index .testInterfaceOrigVal 1 }}), ms.At(0), 0.01)
	{{- else }}
	assert.Equal(t, {{ .itemType }}({{ index .testInterfaceOrigVal 1 }}), ms.At(0))
	{{- end }}
	{{- if eq .itemType "float64" }}
	assert.InDelta(t, {{ .itemType }}({{ index .testInterfaceOrigVal 2 }}), cp.At(0), 0.01)
	{{- else }}
	assert.Equal(t, {{ .itemType }}({{ index .testInterfaceOrigVal 2 }}), cp.At(0))
	{{- end }}
	ms.CopyTo(cp)
	{{- if eq .itemType "float64" }}
	assert.InDelta(t, {{ .itemType }}({{ index .testInterfaceOrigVal 1 }}), cp.At(0), 0.01)
	{{- else }}
	assert.Equal(t, {{ .itemType }}({{ index .testInterfaceOrigVal 1 }}), cp.At(0))
	{{- end }}

	mv := New{{ .structName }}()
	ms.MoveTo(mv)
	assert.Equal(t, 0, ms.Len())
	assert.Equal(t, 1, mv.Len())
	{{- if eq .itemType "float64" }}
	assert.InDelta(t, {{ .itemType }}({{index .testInterfaceOrigVal 1 }}), mv.At(0), 0.01)
	{{- else }}
	assert.Equal(t, {{ .itemType }}({{index .testInterfaceOrigVal 1 }}), mv.At(0))
	{{- end }}
	ms.FromRaw([]{{ .itemType }}{ {{ .testOrigVal }} })
	ms.MoveTo(mv)
	assert.Equal(t, 3, mv.Len())
	{{- if eq .itemType "float64" }}
	assert.InDelta(t, {{ .itemType }}({{index .testInterfaceOrigVal 0 }}), mv.At(0), 0.01)
	{{- else }}
	assert.Equal(t, {{ .itemType }}({{index .testInterfaceOrigVal 0 }}), mv.At(0))
	{{- end }}
}

func Test{{ .structName }}ReadOnly(t *testing.T) {
	raw := []{{ .itemType }}{ {{ .testOrigVal }}}
	state := internal.StateReadOnly
	ms := {{ .structName }}(internal.New{{ .structName }}(&raw, &state))

	assert.Equal(t, 3, ms.Len())
	{{- if eq .itemType "float64" }}
	assert.InDelta(t, {{ .itemType }}( {{index .testInterfaceOrigVal 0 }} ), ms.At(0), 0.01)
	{{- else }}
	assert.Equal(t, {{ .itemType }}({{ index .testInterfaceOrigVal 0 }}), ms.At(0))
	{{- end }}
	assert.Panics(t, func() { ms.Append({{ index .testInterfaceOrigVal 0 }}) })
	assert.Panics(t, func() { ms.EnsureCapacity(2) })
	assert.Equal(t, raw, ms.AsRaw())
	assert.Panics(t, func() { ms.FromRaw(raw) })

	ms2 := New{{ .structName }}()
	ms.CopyTo(ms2)
	assert.Equal(t, ms.AsRaw(), ms2.AsRaw())
	assert.Panics(t, func() { ms2.CopyTo(ms) })

	assert.Panics(t, func() { ms.MoveTo(ms2) })
	assert.Panics(t, func() { ms2.MoveTo(ms) })
}

func Test{{ .structName }}Append(t *testing.T) {
	ms := New{{ .structName }}()
	ms.FromRaw([]{{ .itemType }}{ {{ .testOrigVal }} })
	ms.Append({{ .testSetVal }}, {{ .testSetVal }})
	assert.Equal(t, 5, ms.Len())
	{{- if eq .itemType "float64" }}
	assert.InDelta(t, {{ .itemType }}({{ .testSetVal }} ), ms.At(4), 0.01)
	{{- else }}
	assert.Equal(t, {{ .itemType }}({{ .testSetVal }}), ms.At(4))
	{{- end }}
}

func Test{{ .structName }}EnsureCapacity(t *testing.T) {
	ms := New{{ .structName }}()
	ms.EnsureCapacity(4)
	assert.Equal(t, 4, cap(*ms.getOrig()))
	ms.EnsureCapacity(2)
	assert.Equal(t, 4, cap(*ms.getOrig()))
}

{{- if ne .itemType "string" }}

func Test{{ .structName }}TryIncrementFrom(t *testing.T) {
	ms := New{{ .structName }}()
	ms.FromRaw([]{{ .itemType }}{10, 9})

	ms2 := New{{ .structName }}()
	ms2.FromRaw([]{{ .itemType }}{1, 10})

	assert.False(t, ms.TryIncrementFrom(ms2, 1))
	ms.EnsureCapacity(4)
	assert.True(t, ms.TryIncrementFrom(ms2, 1))
	{{- if eq .itemType "float64" }}
	assert.InDelta(t, {{ .itemType }}(10), ms.At(0), 0.01)
	assert.InDelta(t, {{ .itemType }}(10), ms.At(1), 0.01)
	assert.InDelta(t, {{ .itemType }}(10), ms.At(2), 0.01)
	{{- else }}
	assert.Equal(t, {{ .itemType }}(10), ms.At(0))
	assert.Equal(t, {{ .itemType }}(10), ms.At(1))
	assert.Equal(t, {{ .itemType }}(10), ms.At(2))
	{{- end }}
}

func Test{{ .structName }}Collapse(t *testing.T) {
	ms := New{{ .structName }}()
	ms.FromRaw([]{{ .itemType }}{1, 1, 1, 1, 1, 1})

	ms.Collapse(4, 0)

	assert.Equal(t, 2, ms.Len())
	{{- if eq .itemType "float64" }}
	assert.InDelta(t, {{ .itemType }}(4), ms.At(0), 0.01)
	assert.InDelta(t, {{ .itemType }}(2), ms.At(1), 0.01)
	{{- else }}
	assert.Equal(t, {{ .itemType }}(4), ms.At(0))
	assert.Equal(t, {{ .itemType }}(2), ms.At(1))
	{{- end }}
}

func Test{{ .structName }}CollapseOffset(t *testing.T) {
	ms := New{{ .structName }}()
	ms.FromRaw([]{{ .itemType }}{1, 1, 1, 1, 1, 1})

	ms.Collapse(4, 3)

	assert.Equal(t, 3, ms.Len())
	{{- if eq .itemType "float64" }}
	assert.InDelta(t, {{ .itemType }}(1), ms.At(0), 0.01)
	assert.InDelta(t, {{ .itemType }}(4), ms.At(1), 0.01)
	assert.InDelta(t, {{ .itemType }}(1), ms.At(2), 0.01)
	{{- else }}
	assert.Equal(t, {{ .itemType }}(1), ms.At(0))
	assert.Equal(t, {{ .itemType }}(4), ms.At(1))
	assert.Equal(t, {{ .itemType }}(1), ms.At(2))
	{{- end }}
}
{{- end }}
