// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
)

func CopyOrigMetric(dest, src *otlpmetrics.Metric) {
	dest.Name = src.Name
	dest.Description = src.Description
	dest.Unit = src.Unit
	dest.Metadata = CopyOrigKeyValueSlice(dest.Metadata, src.Metadata)
	switch t := src.Data.(type) {
	case *otlpmetrics.Metric_Gauge:
		gauge := &otlpmetrics.Gauge{}
		CopyOrigGauge(gauge, t.Gauge)
		dest.Data = &otlpmetrics.Metric_Gauge{
			Gauge: gauge,
		}
	case *otlpmetrics.Metric_Sum:
		sum := &otlpmetrics.Sum{}
		CopyOrigSum(sum, t.Sum)
		dest.Data = &otlpmetrics.Metric_Sum{
			Sum: sum,
		}
	case *otlpmetrics.Metric_Histogram:
		histogram := &otlpmetrics.Histogram{}
		CopyOrigHistogram(histogram, t.Histogram)
		dest.Data = &otlpmetrics.Metric_Histogram{
			Histogram: histogram,
		}
	case *otlpmetrics.Metric_ExponentialHistogram:
		exponentialhistogram := &otlpmetrics.ExponentialHistogram{}
		CopyOrigExponentialHistogram(exponentialhistogram, t.ExponentialHistogram)
		dest.Data = &otlpmetrics.Metric_ExponentialHistogram{
			ExponentialHistogram: exponentialhistogram,
		}
	case *otlpmetrics.Metric_Summary:
		summary := &otlpmetrics.Summary{}
		CopyOrigSummary(summary, t.Summary)
		dest.Data = &otlpmetrics.Metric_Summary{
			Summary: summary,
		}
	}
}

func FillOrigTestMetric(orig *otlpmetrics.Metric) {
	orig.Name = "test_name"
	orig.Description = "test_description"
	orig.Unit = "test_unit"
	orig.Metadata = GenerateOrigTestKeyValueSlice()
	orig.Data = &otlpmetrics.Metric_Sum{Sum: &otlpmetrics.Sum{}}
	FillOrigTestSum(orig.GetSum())
}
