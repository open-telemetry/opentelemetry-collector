// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"fmt"
	"sync"

	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

var (
	protoPoolMetric = sync.Pool{
		New: func() any {
			return &otlpmetrics.Metric{}
		},
	}

	protoPoolMetric_Gauge = sync.Pool{
		New: func() any {
			return &otlpmetrics.Metric_Gauge{}
		},
	}

	protoPoolMetric_Sum = sync.Pool{
		New: func() any {
			return &otlpmetrics.Metric_Sum{}
		},
	}

	protoPoolMetric_Histogram = sync.Pool{
		New: func() any {
			return &otlpmetrics.Metric_Histogram{}
		},
	}

	protoPoolMetric_ExponentialHistogram = sync.Pool{
		New: func() any {
			return &otlpmetrics.Metric_ExponentialHistogram{}
		},
	}

	protoPoolMetric_Summary = sync.Pool{
		New: func() any {
			return &otlpmetrics.Metric_Summary{}
		},
	}
)

func NewOrigMetric() *otlpmetrics.Metric {
	if !UseProtoPooling.IsEnabled() {
		return &otlpmetrics.Metric{}
	}
	return protoPoolMetric.Get().(*otlpmetrics.Metric)
}

func DeleteOrigMetric(orig *otlpmetrics.Metric, nullable bool) {
	if orig == nil {
		return
	}

	if !UseProtoPooling.IsEnabled() {
		orig.Reset()
		return
	}

	switch ov := orig.Data.(type) {
	case *otlpmetrics.Metric_Gauge:
		if UseProtoPooling.IsEnabled() {
			DeleteOrigGauge(ov.Gauge, true)
			ov.Gauge = nil
			protoPoolMetric_Gauge.Put(ov)
		}
		DeleteOrigGauge(ov.Gauge, true)
	case *otlpmetrics.Metric_Sum:
		if UseProtoPooling.IsEnabled() {
			DeleteOrigSum(ov.Sum, true)
			ov.Sum = nil
			protoPoolMetric_Sum.Put(ov)
		}
		DeleteOrigSum(ov.Sum, true)
	case *otlpmetrics.Metric_Histogram:
		if UseProtoPooling.IsEnabled() {
			DeleteOrigHistogram(ov.Histogram, true)
			ov.Histogram = nil
			protoPoolMetric_Histogram.Put(ov)
		}
		DeleteOrigHistogram(ov.Histogram, true)
	case *otlpmetrics.Metric_ExponentialHistogram:
		if UseProtoPooling.IsEnabled() {
			DeleteOrigExponentialHistogram(ov.ExponentialHistogram, true)
			ov.ExponentialHistogram = nil
			protoPoolMetric_ExponentialHistogram.Put(ov)
		}
		DeleteOrigExponentialHistogram(ov.ExponentialHistogram, true)
	case *otlpmetrics.Metric_Summary:
		if UseProtoPooling.IsEnabled() {
			DeleteOrigSummary(ov.Summary, true)
			ov.Summary = nil
			protoPoolMetric_Summary.Put(ov)
		}
		DeleteOrigSummary(ov.Summary, true)

	}
	for i := range orig.Metadata {
		DeleteOrigKeyValue(&orig.Metadata[i], false)
	}

	orig.Reset()
	if nullable {
		protoPoolMetric.Put(orig)
	}
}

func CopyOrigMetric(dest, src *otlpmetrics.Metric) {
	// If copying to same object, just return.
	if src == dest {
		return
	}
	dest.Name = src.Name
	dest.Description = src.Description
	dest.Unit = src.Unit
	switch t := src.Data.(type) {
	case *otlpmetrics.Metric_Gauge:
		gauge := &otlpmetrics.Gauge{}
		CopyOrigGauge(gauge, t.Gauge)
		dest.Data = &otlpmetrics.Metric_Gauge{
			Gauge: gauge,
		}
	case *otlpmetrics.Metric_Sum:
		sum := &otlpmetrics.Sum{}
		CopyOrigSum(sum, t.Sum)
		dest.Data = &otlpmetrics.Metric_Sum{
			Sum: sum,
		}
	case *otlpmetrics.Metric_Histogram:
		histogram := &otlpmetrics.Histogram{}
		CopyOrigHistogram(histogram, t.Histogram)
		dest.Data = &otlpmetrics.Metric_Histogram{
			Histogram: histogram,
		}
	case *otlpmetrics.Metric_ExponentialHistogram:
		exponentialhistogram := &otlpmetrics.ExponentialHistogram{}
		CopyOrigExponentialHistogram(exponentialhistogram, t.ExponentialHistogram)
		dest.Data = &otlpmetrics.Metric_ExponentialHistogram{
			ExponentialHistogram: exponentialhistogram,
		}
	case *otlpmetrics.Metric_Summary:
		summary := &otlpmetrics.Summary{}
		CopyOrigSummary(summary, t.Summary)
		dest.Data = &otlpmetrics.Metric_Summary{
			Summary: summary,
		}
	}
	dest.Metadata = CopyOrigKeyValueSlice(dest.Metadata, src.Metadata)
}

func GenTestOrigMetric() *otlpmetrics.Metric {
	orig := NewOrigMetric()
	orig.Name = "test_name"
	orig.Description = "test_description"
	orig.Unit = "test_unit"
	orig.Data = &otlpmetrics.Metric_Sum{Sum: GenTestOrigSum()}
	orig.Metadata = GenerateOrigTestKeyValueSlice()
	return orig
}

// MarshalJSONOrig marshals all properties from the current struct to the destination stream.
func MarshalJSONOrigMetric(orig *otlpmetrics.Metric, dest *json.Stream) {
	dest.WriteObjectStart()
	if orig.Name != "" {
		dest.WriteObjectField("name")
		dest.WriteString(orig.Name)
	}
	if orig.Description != "" {
		dest.WriteObjectField("description")
		dest.WriteString(orig.Description)
	}
	if orig.Unit != "" {
		dest.WriteObjectField("unit")
		dest.WriteString(orig.Unit)
	}
	switch orig.Data.(type) {
	case *otlpmetrics.Metric_Gauge:
		if orig.Data.(*otlpmetrics.Metric_Gauge).Gauge != nil {
			dest.WriteObjectField("gauge")
			MarshalJSONOrigGauge(orig.Data.(*otlpmetrics.Metric_Gauge).Gauge, dest)
		}
	case *otlpmetrics.Metric_Sum:
		if orig.Data.(*otlpmetrics.Metric_Sum).Sum != nil {
			dest.WriteObjectField("sum")
			MarshalJSONOrigSum(orig.Data.(*otlpmetrics.Metric_Sum).Sum, dest)
		}
	case *otlpmetrics.Metric_Histogram:
		if orig.Data.(*otlpmetrics.Metric_Histogram).Histogram != nil {
			dest.WriteObjectField("histogram")
			MarshalJSONOrigHistogram(orig.Data.(*otlpmetrics.Metric_Histogram).Histogram, dest)
		}
	case *otlpmetrics.Metric_ExponentialHistogram:
		if orig.Data.(*otlpmetrics.Metric_ExponentialHistogram).ExponentialHistogram != nil {
			dest.WriteObjectField("exponentialHistogram")
			MarshalJSONOrigExponentialHistogram(orig.Data.(*otlpmetrics.Metric_ExponentialHistogram).ExponentialHistogram, dest)
		}
	case *otlpmetrics.Metric_Summary:
		if orig.Data.(*otlpmetrics.Metric_Summary).Summary != nil {
			dest.WriteObjectField("summary")
			MarshalJSONOrigSummary(orig.Data.(*otlpmetrics.Metric_Summary).Summary, dest)
		}
	}
	if len(orig.Metadata) > 0 {
		dest.WriteObjectField("metadata")
		dest.WriteArrayStart()
		MarshalJSONOrigKeyValue(&orig.Metadata[0], dest)
		for i := 1; i < len(orig.Metadata); i++ {
			dest.WriteMore()
			MarshalJSONOrigKeyValue(&orig.Metadata[i], dest)
		}
		dest.WriteArrayEnd()
	}
	dest.WriteObjectEnd()
}

// UnmarshalJSONOrigMetric unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrigMetric(orig *otlpmetrics.Metric, iter *json.Iterator) {
	for f := iter.ReadObject(); f != ""; f = iter.ReadObject() {
		switch f {
		case "name":
			orig.Name = iter.ReadString()
		case "description":
			orig.Description = iter.ReadString()
		case "unit":
			orig.Unit = iter.ReadString()

		case "gauge":
			{
				var ov *otlpmetrics.Metric_Gauge
				if !UseProtoPooling.IsEnabled() {
					ov = &otlpmetrics.Metric_Gauge{}
				} else {
					ov = protoPoolMetric_Gauge.Get().(*otlpmetrics.Metric_Gauge)
				}
				ov.Gauge = NewOrigGauge()
				UnmarshalJSONOrigGauge(ov.Gauge, iter)
				orig.Data = ov
			}

		case "sum":
			{
				var ov *otlpmetrics.Metric_Sum
				if !UseProtoPooling.IsEnabled() {
					ov = &otlpmetrics.Metric_Sum{}
				} else {
					ov = protoPoolMetric_Sum.Get().(*otlpmetrics.Metric_Sum)
				}
				ov.Sum = NewOrigSum()
				UnmarshalJSONOrigSum(ov.Sum, iter)
				orig.Data = ov
			}

		case "histogram":
			{
				var ov *otlpmetrics.Metric_Histogram
				if !UseProtoPooling.IsEnabled() {
					ov = &otlpmetrics.Metric_Histogram{}
				} else {
					ov = protoPoolMetric_Histogram.Get().(*otlpmetrics.Metric_Histogram)
				}
				ov.Histogram = NewOrigHistogram()
				UnmarshalJSONOrigHistogram(ov.Histogram, iter)
				orig.Data = ov
			}

		case "exponentialHistogram", "exponential_histogram":
			{
				var ov *otlpmetrics.Metric_ExponentialHistogram
				if !UseProtoPooling.IsEnabled() {
					ov = &otlpmetrics.Metric_ExponentialHistogram{}
				} else {
					ov = protoPoolMetric_ExponentialHistogram.Get().(*otlpmetrics.Metric_ExponentialHistogram)
				}
				ov.ExponentialHistogram = NewOrigExponentialHistogram()
				UnmarshalJSONOrigExponentialHistogram(ov.ExponentialHistogram, iter)
				orig.Data = ov
			}

		case "summary":
			{
				var ov *otlpmetrics.Metric_Summary
				if !UseProtoPooling.IsEnabled() {
					ov = &otlpmetrics.Metric_Summary{}
				} else {
					ov = protoPoolMetric_Summary.Get().(*otlpmetrics.Metric_Summary)
				}
				ov.Summary = NewOrigSummary()
				UnmarshalJSONOrigSummary(ov.Summary, iter)
				orig.Data = ov
			}

		case "metadata":
			for iter.ReadArray() {
				orig.Metadata = append(orig.Metadata, otlpcommon.KeyValue{})
				UnmarshalJSONOrigKeyValue(&orig.Metadata[len(orig.Metadata)-1], iter)
			}

		default:
			iter.Skip()
		}
	}
}

func SizeProtoOrigMetric(orig *otlpmetrics.Metric) int {
	var n int
	var l int
	_ = l
	l = len(orig.Name)
	if l > 0 {
		n += 1 + proto.Sov(uint64(l)) + l
	}
	l = len(orig.Description)
	if l > 0 {
		n += 1 + proto.Sov(uint64(l)) + l
	}
	l = len(orig.Unit)
	if l > 0 {
		n += 1 + proto.Sov(uint64(l)) + l
	}
	switch orig.Data.(type) {
	case *otlpmetrics.Metric_Gauge:
		l = SizeProtoOrigGauge(orig.Data.(*otlpmetrics.Metric_Gauge).Gauge)
		n += 1 + proto.Sov(uint64(l)) + l
	case *otlpmetrics.Metric_Sum:
		l = SizeProtoOrigSum(orig.Data.(*otlpmetrics.Metric_Sum).Sum)
		n += 1 + proto.Sov(uint64(l)) + l
	case *otlpmetrics.Metric_Histogram:
		l = SizeProtoOrigHistogram(orig.Data.(*otlpmetrics.Metric_Histogram).Histogram)
		n += 1 + proto.Sov(uint64(l)) + l
	case *otlpmetrics.Metric_ExponentialHistogram:
		l = SizeProtoOrigExponentialHistogram(orig.Data.(*otlpmetrics.Metric_ExponentialHistogram).ExponentialHistogram)
		n += 1 + proto.Sov(uint64(l)) + l
	case *otlpmetrics.Metric_Summary:
		l = SizeProtoOrigSummary(orig.Data.(*otlpmetrics.Metric_Summary).Summary)
		n += 1 + proto.Sov(uint64(l)) + l
	}
	for i := range orig.Metadata {
		l = SizeProtoOrigKeyValue(&orig.Metadata[i])
		n += 1 + proto.Sov(uint64(l)) + l
	}
	return n
}

func MarshalProtoOrigMetric(orig *otlpmetrics.Metric, buf []byte) int {
	pos := len(buf)
	var l int
	_ = l
	l = len(orig.Name)
	if l > 0 {
		pos -= l
		copy(buf[pos:], orig.Name)
		pos = proto.EncodeVarint(buf, pos, uint64(l))
		pos--
		buf[pos] = 0xa
	}
	l = len(orig.Description)
	if l > 0 {
		pos -= l
		copy(buf[pos:], orig.Description)
		pos = proto.EncodeVarint(buf, pos, uint64(l))
		pos--
		buf[pos] = 0x12
	}
	l = len(orig.Unit)
	if l > 0 {
		pos -= l
		copy(buf[pos:], orig.Unit)
		pos = proto.EncodeVarint(buf, pos, uint64(l))
		pos--
		buf[pos] = 0x1a
	}
	switch orig.Data.(type) {
	case *otlpmetrics.Metric_Gauge:

		l = MarshalProtoOrigGauge(orig.Data.(*otlpmetrics.Metric_Gauge).Gauge, buf[:pos])
		pos -= l
		pos = proto.EncodeVarint(buf, pos, uint64(l))
		pos--
		buf[pos] = 0x2a

	case *otlpmetrics.Metric_Sum:

		l = MarshalProtoOrigSum(orig.Data.(*otlpmetrics.Metric_Sum).Sum, buf[:pos])
		pos -= l
		pos = proto.EncodeVarint(buf, pos, uint64(l))
		pos--
		buf[pos] = 0x3a

	case *otlpmetrics.Metric_Histogram:

		l = MarshalProtoOrigHistogram(orig.Data.(*otlpmetrics.Metric_Histogram).Histogram, buf[:pos])
		pos -= l
		pos = proto.EncodeVarint(buf, pos, uint64(l))
		pos--
		buf[pos] = 0x4a

	case *otlpmetrics.Metric_ExponentialHistogram:

		l = MarshalProtoOrigExponentialHistogram(orig.Data.(*otlpmetrics.Metric_ExponentialHistogram).ExponentialHistogram, buf[:pos])
		pos -= l
		pos = proto.EncodeVarint(buf, pos, uint64(l))
		pos--
		buf[pos] = 0x52

	case *otlpmetrics.Metric_Summary:

		l = MarshalProtoOrigSummary(orig.Data.(*otlpmetrics.Metric_Summary).Summary, buf[:pos])
		pos -= l
		pos = proto.EncodeVarint(buf, pos, uint64(l))
		pos--
		buf[pos] = 0x5a

	}
	for i := len(orig.Metadata) - 1; i >= 0; i-- {
		l = MarshalProtoOrigKeyValue(&orig.Metadata[i], buf[:pos])
		pos -= l
		pos = proto.EncodeVarint(buf, pos, uint64(l))
		pos--
		buf[pos] = 0x62
	}
	return len(buf) - pos
}

func UnmarshalProtoOrigMetric(orig *otlpmetrics.Metric, buf []byte) error {
	var err error
	var fieldNum int32
	var wireType proto.WireType

	l := len(buf)
	pos := 0
	for pos < l {
		// If in a group parsing, move to the next tag.
		fieldNum, wireType, pos, err = proto.ConsumeTag(buf, pos)
		if err != nil {
			return err
		}
		switch fieldNum {

		case 1:
			if wireType != proto.WireTypeLen {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var length int
			length, pos, err = proto.ConsumeLen(buf, pos)
			if err != nil {
				return err
			}
			startPos := pos - length
			orig.Name = string(buf[startPos:pos])

		case 2:
			if wireType != proto.WireTypeLen {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var length int
			length, pos, err = proto.ConsumeLen(buf, pos)
			if err != nil {
				return err
			}
			startPos := pos - length
			orig.Description = string(buf[startPos:pos])

		case 3:
			if wireType != proto.WireTypeLen {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var length int
			length, pos, err = proto.ConsumeLen(buf, pos)
			if err != nil {
				return err
			}
			startPos := pos - length
			orig.Unit = string(buf[startPos:pos])

		case 5:
			if wireType != proto.WireTypeLen {
				return fmt.Errorf("proto: wrong wireType = %d for field Gauge", wireType)
			}
			var length int
			length, pos, err = proto.ConsumeLen(buf, pos)
			if err != nil {
				return err
			}
			startPos := pos - length
			var ov *otlpmetrics.Metric_Gauge
			if !UseProtoPooling.IsEnabled() {
				ov = &otlpmetrics.Metric_Gauge{}
			} else {
				ov = protoPoolMetric_Gauge.Get().(*otlpmetrics.Metric_Gauge)
			}
			ov.Gauge = NewOrigGauge()
			err = UnmarshalProtoOrigGauge(ov.Gauge, buf[startPos:pos])
			if err != nil {
				return err
			}
			orig.Data = ov

		case 7:
			if wireType != proto.WireTypeLen {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var length int
			length, pos, err = proto.ConsumeLen(buf, pos)
			if err != nil {
				return err
			}
			startPos := pos - length
			var ov *otlpmetrics.Metric_Sum
			if !UseProtoPooling.IsEnabled() {
				ov = &otlpmetrics.Metric_Sum{}
			} else {
				ov = protoPoolMetric_Sum.Get().(*otlpmetrics.Metric_Sum)
			}
			ov.Sum = NewOrigSum()
			err = UnmarshalProtoOrigSum(ov.Sum, buf[startPos:pos])
			if err != nil {
				return err
			}
			orig.Data = ov

		case 9:
			if wireType != proto.WireTypeLen {
				return fmt.Errorf("proto: wrong wireType = %d for field Histogram", wireType)
			}
			var length int
			length, pos, err = proto.ConsumeLen(buf, pos)
			if err != nil {
				return err
			}
			startPos := pos - length
			var ov *otlpmetrics.Metric_Histogram
			if !UseProtoPooling.IsEnabled() {
				ov = &otlpmetrics.Metric_Histogram{}
			} else {
				ov = protoPoolMetric_Histogram.Get().(*otlpmetrics.Metric_Histogram)
			}
			ov.Histogram = NewOrigHistogram()
			err = UnmarshalProtoOrigHistogram(ov.Histogram, buf[startPos:pos])
			if err != nil {
				return err
			}
			orig.Data = ov

		case 10:
			if wireType != proto.WireTypeLen {
				return fmt.Errorf("proto: wrong wireType = %d for field ExponentialHistogram", wireType)
			}
			var length int
			length, pos, err = proto.ConsumeLen(buf, pos)
			if err != nil {
				return err
			}
			startPos := pos - length
			var ov *otlpmetrics.Metric_ExponentialHistogram
			if !UseProtoPooling.IsEnabled() {
				ov = &otlpmetrics.Metric_ExponentialHistogram{}
			} else {
				ov = protoPoolMetric_ExponentialHistogram.Get().(*otlpmetrics.Metric_ExponentialHistogram)
			}
			ov.ExponentialHistogram = NewOrigExponentialHistogram()
			err = UnmarshalProtoOrigExponentialHistogram(ov.ExponentialHistogram, buf[startPos:pos])
			if err != nil {
				return err
			}
			orig.Data = ov

		case 11:
			if wireType != proto.WireTypeLen {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var length int
			length, pos, err = proto.ConsumeLen(buf, pos)
			if err != nil {
				return err
			}
			startPos := pos - length
			var ov *otlpmetrics.Metric_Summary
			if !UseProtoPooling.IsEnabled() {
				ov = &otlpmetrics.Metric_Summary{}
			} else {
				ov = protoPoolMetric_Summary.Get().(*otlpmetrics.Metric_Summary)
			}
			ov.Summary = NewOrigSummary()
			err = UnmarshalProtoOrigSummary(ov.Summary, buf[startPos:pos])
			if err != nil {
				return err
			}
			orig.Data = ov

		case 12:
			if wireType != proto.WireTypeLen {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var length int
			length, pos, err = proto.ConsumeLen(buf, pos)
			if err != nil {
				return err
			}
			startPos := pos - length
			orig.Metadata = append(orig.Metadata, otlpcommon.KeyValue{})
			err = UnmarshalProtoOrigKeyValue(&orig.Metadata[len(orig.Metadata)-1], buf[startPos:pos])
			if err != nil {
				return err
			}
		default:
			pos, err = proto.ConsumeUnknown(buf, pos, wireType)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
