// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	gootlpcollectorprofiles "go.opentelemetry.io/proto/slim/otlp/collector/profiles/v1development"
	"google.golang.org/protobuf/proto"

	otlpcollectorprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/profiles/v1development"
	"go.opentelemetry.io/collector/pdata/internal/json"
)

func TestCopyOrigExportProfilesServiceResponse(t *testing.T) {
	src := NewOrigPtrExportProfilesServiceResponse()
	dest := NewOrigPtrExportProfilesServiceResponse()
	CopyOrigExportProfilesServiceResponse(dest, src)
	assert.Equal(t, NewOrigPtrExportProfilesServiceResponse(), dest)
	FillOrigTestExportProfilesServiceResponse(src)
	CopyOrigExportProfilesServiceResponse(dest, src)
	assert.Equal(t, src, dest)
}

func TestMarshalAndUnmarshalJSONOrigExportProfilesServiceResponseUnknown(t *testing.T) {
	iter := json.BorrowIterator([]byte(`{"unknown": "string"}`))
	defer json.ReturnIterator(iter)
	dest := NewOrigPtrExportProfilesServiceResponse()
	UnmarshalJSONOrigExportProfilesServiceResponse(dest, iter)
	require.NoError(t, iter.Error())
	assert.Equal(t, NewOrigPtrExportProfilesServiceResponse(), dest)
}

func TestMarshalAndUnmarshalJSONOrigExportProfilesServiceResponse(t *testing.T) {
	for name, src := range getEncodingTestValuesExportProfilesServiceResponse() {
		t.Run(name, func(t *testing.T) {
			stream := json.BorrowStream(nil)
			defer json.ReturnStream(stream)
			MarshalJSONOrigExportProfilesServiceResponse(src, stream)
			require.NoError(t, stream.Error())

			iter := json.BorrowIterator(stream.Buffer())
			defer json.ReturnIterator(iter)
			dest := NewOrigPtrExportProfilesServiceResponse()
			UnmarshalJSONOrigExportProfilesServiceResponse(dest, iter)
			require.NoError(t, iter.Error())

			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoOrigExportProfilesServiceResponseUnknown(t *testing.T) {
	dest := NewOrigPtrExportProfilesServiceResponse()
	// message Test { required int64 field = 1313; } encoding { "field": "1234" }
	require.NoError(t, UnmarshalProtoOrigExportProfilesServiceResponse(dest, []byte{0x88, 0x52, 0xD2, 0x09}))
	assert.Equal(t, NewOrigPtrExportProfilesServiceResponse(), dest)
}

func TestMarshalAndUnmarshalProtoOrigExportProfilesServiceResponse(t *testing.T) {
	for name, src := range getEncodingTestValuesExportProfilesServiceResponse() {
		t.Run(name, func(t *testing.T) {
			buf := make([]byte, SizeProtoOrigExportProfilesServiceResponse(src))
			gotSize := MarshalProtoOrigExportProfilesServiceResponse(src, buf)
			assert.Equal(t, len(buf), gotSize)

			dest := NewOrigPtrExportProfilesServiceResponse()
			require.NoError(t, UnmarshalProtoOrigExportProfilesServiceResponse(dest, buf))
			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoViaProtobufExportProfilesServiceResponse(t *testing.T) {
	for name, src := range getEncodingTestValuesExportProfilesServiceResponse() {
		t.Run(name, func(t *testing.T) {
			buf := make([]byte, SizeProtoOrigExportProfilesServiceResponse(src))
			gotSize := MarshalProtoOrigExportProfilesServiceResponse(src, buf)
			assert.Equal(t, len(buf), gotSize)

			goDest := &gootlpcollectorprofiles.ExportProfilesServiceResponse{}
			require.NoError(t, proto.Unmarshal(buf, goDest))

			goBuf, err := proto.Marshal(goDest)
			require.NoError(t, err)

			dest := NewOrigPtrExportProfilesServiceResponse()
			require.NoError(t, UnmarshalProtoOrigExportProfilesServiceResponse(dest, goBuf))
			assert.Equal(t, src, dest)
		})
	}
}

func getEncodingTestValuesExportProfilesServiceResponse() map[string]*otlpcollectorprofiles.ExportProfilesServiceResponse {
	return map[string]*otlpcollectorprofiles.ExportProfilesServiceResponse{
		"empty": NewOrigPtrExportProfilesServiceResponse(),
		"fill_test": func() *otlpcollectorprofiles.ExportProfilesServiceResponse {
			src := NewOrigPtrExportProfilesServiceResponse()
			FillOrigTestExportProfilesServiceResponse(src)
			return src
		}(),
	}
}
