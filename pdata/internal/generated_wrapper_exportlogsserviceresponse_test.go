// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"strconv"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	gootlpcollectorlogs "go.opentelemetry.io/proto/slim/otlp/collector/logs/v1"
	"google.golang.org/protobuf/proto"

	"go.opentelemetry.io/collector/featuregate"
	otlpcollectorlogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/logs/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"
)

func TestCopyExportLogsServiceResponse(t *testing.T) {
	for name, src := range genTestEncodingValuesExportLogsServiceResponse() {
		for _, pooling := range []bool{true, false} {
			t.Run(name+"/Pooling="+strconv.FormatBool(pooling), func(t *testing.T) {
				prevPooling := UseProtoPooling.IsEnabled()
				require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), pooling))
				defer func() {
					require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), prevPooling))
				}()

				dest := NewExportLogsServiceResponse()
				CopyExportLogsServiceResponse(dest, src)
				assert.Equal(t, src, dest)
				CopyExportLogsServiceResponse(dest, dest)
				assert.Equal(t, src, dest)
			})
		}
	}
}

func TestMarshalAndUnmarshalJSONExportLogsServiceResponseUnknown(t *testing.T) {
	iter := json.BorrowIterator([]byte(`{"unknown": "string"}`))
	defer json.ReturnIterator(iter)
	dest := NewExportLogsServiceResponse()
	UnmarshalJSONExportLogsServiceResponse(dest, iter)
	require.NoError(t, iter.Error())
	assert.Equal(t, NewExportLogsServiceResponse(), dest)
}

func TestMarshalAndUnmarshalJSONExportLogsServiceResponse(t *testing.T) {
	for name, src := range genTestEncodingValuesExportLogsServiceResponse() {
		for _, pooling := range []bool{true, false} {
			t.Run(name+"/Pooling="+strconv.FormatBool(pooling), func(t *testing.T) {
				prevPooling := UseProtoPooling.IsEnabled()
				require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), pooling))
				defer func() {
					require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), prevPooling))
				}()

				stream := json.BorrowStream(nil)
				defer json.ReturnStream(stream)
				MarshalJSONExportLogsServiceResponse(src, stream)
				require.NoError(t, stream.Error())

				iter := json.BorrowIterator(stream.Buffer())
				defer json.ReturnIterator(iter)
				dest := NewExportLogsServiceResponse()
				UnmarshalJSONExportLogsServiceResponse(dest, iter)
				require.NoError(t, iter.Error())

				assert.Equal(t, src, dest)
				DeleteExportLogsServiceResponse(dest, true)
			})
		}
	}
}

func TestMarshalAndUnmarshalProtoExportLogsServiceResponseFailing(t *testing.T) {
	for name, buf := range genTestFailingUnmarshalProtoValuesExportLogsServiceResponse() {
		t.Run(name, func(t *testing.T) {
			dest := NewExportLogsServiceResponse()
			require.Error(t, UnmarshalProtoExportLogsServiceResponse(dest, buf))
		})
	}
}

func TestMarshalAndUnmarshalProtoExportLogsServiceResponseUnknown(t *testing.T) {
	dest := NewExportLogsServiceResponse()
	// message Test { required int64 field = 1313; } encoding { "field": "1234" }
	require.NoError(t, UnmarshalProtoExportLogsServiceResponse(dest, []byte{0x88, 0x52, 0xD2, 0x09}))
	assert.Equal(t, NewExportLogsServiceResponse(), dest)
}

func TestMarshalAndUnmarshalProtoExportLogsServiceResponse(t *testing.T) {
	for name, src := range genTestEncodingValuesExportLogsServiceResponse() {
		for _, pooling := range []bool{true, false} {
			t.Run(name+"/Pooling="+strconv.FormatBool(pooling), func(t *testing.T) {
				prevPooling := UseProtoPooling.IsEnabled()
				require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), pooling))
				defer func() {
					require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), prevPooling))
				}()

				buf := make([]byte, SizeProtoExportLogsServiceResponse(src))
				gotSize := MarshalProtoExportLogsServiceResponse(src, buf)
				assert.Equal(t, len(buf), gotSize)

				dest := NewExportLogsServiceResponse()
				require.NoError(t, UnmarshalProtoExportLogsServiceResponse(dest, buf))

				assert.Equal(t, src, dest)
				DeleteExportLogsServiceResponse(dest, true)
			})
		}
	}
}

func TestMarshalAndUnmarshalProtoViaProtobufExportLogsServiceResponse(t *testing.T) {
	for name, src := range genTestEncodingValuesExportLogsServiceResponse() {
		t.Run(name, func(t *testing.T) {
			buf := make([]byte, SizeProtoExportLogsServiceResponse(src))
			gotSize := MarshalProtoExportLogsServiceResponse(src, buf)
			assert.Equal(t, len(buf), gotSize)

			goDest := &gootlpcollectorlogs.ExportLogsServiceResponse{}
			require.NoError(t, proto.Unmarshal(buf, goDest))

			goBuf, err := proto.Marshal(goDest)
			require.NoError(t, err)

			dest := NewExportLogsServiceResponse()
			require.NoError(t, UnmarshalProtoExportLogsServiceResponse(dest, goBuf))
			assert.Equal(t, src, dest)
		})
	}
}

func genTestFailingUnmarshalProtoValuesExportLogsServiceResponse() map[string][]byte {
	return map[string][]byte{
		"invalid_field":                  {0x02},
		"PartialSuccess/wrong_wire_type": {0xc},
		"PartialSuccess/missing_value":   {0xa},
	}
}

func genTestEncodingValuesExportLogsServiceResponse() map[string]*otlpcollectorlogs.ExportLogsServiceResponse {
	return map[string]*otlpcollectorlogs.ExportLogsServiceResponse{
		"empty":               NewExportLogsServiceResponse(),
		"PartialSuccess/test": {PartialSuccess: *GenTestExportLogsPartialSuccess()},
	}
}
