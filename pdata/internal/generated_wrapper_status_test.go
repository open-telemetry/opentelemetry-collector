// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	gootlptrace "go.opentelemetry.io/proto/slim/otlp/trace/v1"
	"google.golang.org/protobuf/proto"

	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"
)

func TestCopyOrigStatus(t *testing.T) {
	src := NewOrigPtrStatus()
	dest := NewOrigPtrStatus()
	CopyOrigStatus(dest, src)
	assert.Equal(t, NewOrigPtrStatus(), dest)
	FillOrigTestStatus(src)
	CopyOrigStatus(dest, src)
	assert.Equal(t, src, dest)
}

func TestMarshalAndUnmarshalJSONOrigStatusUnknown(t *testing.T) {
	iter := json.BorrowIterator([]byte(`{"unknown": "string"}`))
	defer json.ReturnIterator(iter)
	dest := NewOrigPtrStatus()
	UnmarshalJSONOrigStatus(dest, iter)
	require.NoError(t, iter.Error())
	assert.Equal(t, NewOrigPtrStatus(), dest)
}

func TestMarshalAndUnmarshalJSONOrigStatus(t *testing.T) {
	for name, src := range getEncodingTestValuesStatus() {
		t.Run(name, func(t *testing.T) {
			stream := json.BorrowStream(nil)
			defer json.ReturnStream(stream)
			MarshalJSONOrigStatus(src, stream)
			require.NoError(t, stream.Error())

			iter := json.BorrowIterator(stream.Buffer())
			defer json.ReturnIterator(iter)
			dest := NewOrigPtrStatus()
			UnmarshalJSONOrigStatus(dest, iter)
			require.NoError(t, iter.Error())

			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoOrigStatusUnknown(t *testing.T) {
	dest := NewOrigPtrStatus()
	// message Test { required int64 field = 1313; } encoding { "field": "1234" }
	require.NoError(t, UnmarshalProtoOrigStatus(dest, []byte{0x88, 0x52, 0xD2, 0x09}))
	assert.Equal(t, NewOrigPtrStatus(), dest)
}

func TestMarshalAndUnmarshalProtoOrigStatus(t *testing.T) {
	for name, src := range getEncodingTestValuesStatus() {
		t.Run(name, func(t *testing.T) {
			buf := make([]byte, SizeProtoOrigStatus(src))
			gotSize := MarshalProtoOrigStatus(src, buf)
			assert.Equal(t, len(buf), gotSize)

			dest := NewOrigPtrStatus()
			require.NoError(t, UnmarshalProtoOrigStatus(dest, buf))
			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoViaProtobufStatus(t *testing.T) {
	for name, src := range getEncodingTestValuesStatus() {
		t.Run(name, func(t *testing.T) {
			buf := make([]byte, SizeProtoOrigStatus(src))
			gotSize := MarshalProtoOrigStatus(src, buf)
			assert.Equal(t, len(buf), gotSize)

			goDest := &gootlptrace.Status{}
			require.NoError(t, proto.Unmarshal(buf, goDest))

			goBuf, err := proto.Marshal(goDest)
			require.NoError(t, err)

			dest := NewOrigPtrStatus()
			require.NoError(t, UnmarshalProtoOrigStatus(dest, goBuf))
			assert.Equal(t, src, dest)
		})
	}
}

func getEncodingTestValuesStatus() map[string]*otlptrace.Status {
	return map[string]*otlptrace.Status{
		"empty": NewOrigPtrStatus(),
		"fill_test": func() *otlptrace.Status {
			src := NewOrigPtrStatus()
			FillOrigTestStatus(src)
			return src
		}(),
	}
}
