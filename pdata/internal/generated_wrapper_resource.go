// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"fmt"
	"sync"

	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	otlpresource "go.opentelemetry.io/collector/pdata/internal/data/protogen/resource/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

type ResourceWrapper struct {
	orig  *otlpresource.Resource
	state *State
}

func GetResourceOrig(ms ResourceWrapper) *otlpresource.Resource {
	return ms.orig
}

func GetResourceState(ms ResourceWrapper) *State {
	return ms.state
}

func NewResourceWrapper(orig *otlpresource.Resource, state *State) ResourceWrapper {
	return ResourceWrapper{orig: orig, state: state}
}

func GenTestResourceWrapper() ResourceWrapper {
	orig := GenTestResource()
	return NewResourceWrapper(orig, NewState())
}

var (
	protoPoolResource = sync.Pool{
		New: func() any {
			return &otlpresource.Resource{}
		},
	}
)

func NewResource() *otlpresource.Resource {
	if !UseProtoPooling.IsEnabled() {
		return &otlpresource.Resource{}
	}
	return protoPoolResource.Get().(*otlpresource.Resource)
}

func DeleteResource(orig *otlpresource.Resource, nullable bool) {
	if orig == nil {
		return
	}

	if !UseProtoPooling.IsEnabled() {
		orig.Reset()
		return
	}

	for i := range orig.Attributes {
		DeleteKeyValue(&orig.Attributes[i], false)
	}
	for i := range orig.EntityRefs {
		DeleteEntityRef(orig.EntityRefs[i], true)
	}

	orig.Reset()
	if nullable {
		protoPoolResource.Put(orig)
	}
}

func CopyResource(dest, src *otlpresource.Resource) {
	// If copying to same object, just return.
	if src == dest {
		return
	}
	dest.Attributes = CopyKeyValueSlice(dest.Attributes, src.Attributes)
	dest.DroppedAttributesCount = src.DroppedAttributesCount
	dest.EntityRefs = CopyEntityRefSlice(dest.EntityRefs, src.EntityRefs)
}

func GenTestResource() *otlpresource.Resource {
	orig := NewResource()
	orig.Attributes = GenTestKeyValueSlice()
	orig.DroppedAttributesCount = uint32(13)
	orig.EntityRefs = GenTestEntityRefSlice()
	return orig
}

// MarshalJSON marshals all properties from the current struct to the destination stream.
func MarshalJSONResource(orig *otlpresource.Resource, dest *json.Stream) {
	dest.WriteObjectStart()
	if len(orig.Attributes) > 0 {
		dest.WriteObjectField("attributes")
		dest.WriteArrayStart()
		MarshalJSONKeyValue(&orig.Attributes[0], dest)
		for i := 1; i < len(orig.Attributes); i++ {
			dest.WriteMore()
			MarshalJSONKeyValue(&orig.Attributes[i], dest)
		}
		dest.WriteArrayEnd()
	}
	if orig.DroppedAttributesCount != uint32(0) {
		dest.WriteObjectField("droppedAttributesCount")
		dest.WriteUint32(orig.DroppedAttributesCount)
	}
	if len(orig.EntityRefs) > 0 {
		dest.WriteObjectField("entityRefs")
		dest.WriteArrayStart()
		MarshalJSONEntityRef(orig.EntityRefs[0], dest)
		for i := 1; i < len(orig.EntityRefs); i++ {
			dest.WriteMore()
			MarshalJSONEntityRef(orig.EntityRefs[i], dest)
		}
		dest.WriteArrayEnd()
	}
	dest.WriteObjectEnd()
}

// UnmarshalJSONResource unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONResource(orig *otlpresource.Resource, iter *json.Iterator) {
	for f := iter.ReadObject(); f != ""; f = iter.ReadObject() {
		switch f {
		case "attributes":
			for iter.ReadArray() {
				orig.Attributes = append(orig.Attributes, otlpcommon.KeyValue{})
				UnmarshalJSONKeyValue(&orig.Attributes[len(orig.Attributes)-1], iter)
			}

		case "droppedAttributesCount", "dropped_attributes_count":
			orig.DroppedAttributesCount = iter.ReadUint32()
		case "entityRefs", "entity_refs":
			for iter.ReadArray() {
				orig.EntityRefs = append(orig.EntityRefs, NewEntityRef())
				UnmarshalJSONEntityRef(orig.EntityRefs[len(orig.EntityRefs)-1], iter)
			}

		default:
			iter.Skip()
		}
	}
}

func SizeProtoResource(orig *otlpresource.Resource) int {
	var n int
	var l int
	_ = l
	for i := range orig.Attributes {
		l = SizeProtoKeyValue(&orig.Attributes[i])
		n += 1 + proto.Sov(uint64(l)) + l
	}
	if orig.DroppedAttributesCount != 0 {
		n += 1 + proto.Sov(uint64(orig.DroppedAttributesCount))
	}
	for i := range orig.EntityRefs {
		l = SizeProtoEntityRef(orig.EntityRefs[i])
		n += 1 + proto.Sov(uint64(l)) + l
	}
	return n
}

func MarshalProtoResource(orig *otlpresource.Resource, buf []byte) int {
	pos := len(buf)
	var l int
	_ = l
	for i := len(orig.Attributes) - 1; i >= 0; i-- {
		l = MarshalProtoKeyValue(&orig.Attributes[i], buf[:pos])
		pos -= l
		pos = proto.EncodeVarint(buf, pos, uint64(l))
		pos--
		buf[pos] = 0xa
	}
	if orig.DroppedAttributesCount != 0 {
		pos = proto.EncodeVarint(buf, pos, uint64(orig.DroppedAttributesCount))
		pos--
		buf[pos] = 0x10
	}
	for i := len(orig.EntityRefs) - 1; i >= 0; i-- {
		l = MarshalProtoEntityRef(orig.EntityRefs[i], buf[:pos])
		pos -= l
		pos = proto.EncodeVarint(buf, pos, uint64(l))
		pos--
		buf[pos] = 0x1a
	}
	return len(buf) - pos
}

func UnmarshalProtoResource(orig *otlpresource.Resource, buf []byte) error {
	var err error
	var fieldNum int32
	var wireType proto.WireType

	l := len(buf)
	pos := 0
	for pos < l {
		// If in a group parsing, move to the next tag.
		fieldNum, wireType, pos, err = proto.ConsumeTag(buf, pos)
		if err != nil {
			return err
		}
		switch fieldNum {

		case 1:
			if wireType != proto.WireTypeLen {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var length int
			length, pos, err = proto.ConsumeLen(buf, pos)
			if err != nil {
				return err
			}
			startPos := pos - length
			orig.Attributes = append(orig.Attributes, otlpcommon.KeyValue{})
			err = UnmarshalProtoKeyValue(&orig.Attributes[len(orig.Attributes)-1], buf[startPos:pos])
			if err != nil {
				return err
			}

		case 2:
			if wireType != proto.WireTypeVarint {
				return fmt.Errorf("proto: wrong wireType = %d for field DroppedAttributesCount", wireType)
			}
			var num uint64
			num, pos, err = proto.ConsumeVarint(buf, pos)
			if err != nil {
				return err
			}

			orig.DroppedAttributesCount = uint32(num)

		case 3:
			if wireType != proto.WireTypeLen {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityRefs", wireType)
			}
			var length int
			length, pos, err = proto.ConsumeLen(buf, pos)
			if err != nil {
				return err
			}
			startPos := pos - length
			orig.EntityRefs = append(orig.EntityRefs, NewEntityRef())
			err = UnmarshalProtoEntityRef(orig.EntityRefs[len(orig.EntityRefs)-1], buf[startPos:pos])
			if err != nil {
				return err
			}
		default:
			pos, err = proto.ConsumeUnknown(buf, pos, wireType)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
