// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"strconv"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	gootlpprofiles "go.opentelemetry.io/proto/slim/otlp/profiles/v1development"
	"google.golang.org/protobuf/proto"

	"go.opentelemetry.io/collector/featuregate"
	otlpprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/profiles/v1development"
	"go.opentelemetry.io/collector/pdata/internal/json"
)

func TestCopyStack(t *testing.T) {
	for name, src := range genTestEncodingValuesStack() {
		for _, pooling := range []bool{true, false} {
			t.Run(name+"/Pooling="+strconv.FormatBool(pooling), func(t *testing.T) {
				prevPooling := UseProtoPooling.IsEnabled()
				require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), pooling))
				defer func() {
					require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), prevPooling))
				}()

				dest := NewStack()
				CopyStack(dest, src)
				assert.Equal(t, src, dest)
				CopyStack(dest, dest)
				assert.Equal(t, src, dest)
			})
		}
	}
}

func TestMarshalAndUnmarshalJSONStackUnknown(t *testing.T) {
	iter := json.BorrowIterator([]byte(`{"unknown": "string"}`))
	defer json.ReturnIterator(iter)
	dest := NewStack()
	UnmarshalJSONStack(dest, iter)
	require.NoError(t, iter.Error())
	assert.Equal(t, NewStack(), dest)
}

func TestMarshalAndUnmarshalJSONStack(t *testing.T) {
	for name, src := range genTestEncodingValuesStack() {
		for _, pooling := range []bool{true, false} {
			t.Run(name+"/Pooling="+strconv.FormatBool(pooling), func(t *testing.T) {
				prevPooling := UseProtoPooling.IsEnabled()
				require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), pooling))
				defer func() {
					require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), prevPooling))
				}()

				stream := json.BorrowStream(nil)
				defer json.ReturnStream(stream)
				MarshalJSONStack(src, stream)
				require.NoError(t, stream.Error())

				iter := json.BorrowIterator(stream.Buffer())
				defer json.ReturnIterator(iter)
				dest := NewStack()
				UnmarshalJSONStack(dest, iter)
				require.NoError(t, iter.Error())

				assert.Equal(t, src, dest)
				DeleteStack(dest, true)
			})
		}
	}
}

func TestMarshalAndUnmarshalProtoStackFailing(t *testing.T) {
	for name, buf := range genTestFailingUnmarshalProtoValuesStack() {
		t.Run(name, func(t *testing.T) {
			dest := NewStack()
			require.Error(t, UnmarshalProtoStack(dest, buf))
		})
	}
}

func TestMarshalAndUnmarshalProtoStackUnknown(t *testing.T) {
	dest := NewStack()
	// message Test { required int64 field = 1313; } encoding { "field": "1234" }
	require.NoError(t, UnmarshalProtoStack(dest, []byte{0x88, 0x52, 0xD2, 0x09}))
	assert.Equal(t, NewStack(), dest)
}

func TestMarshalAndUnmarshalProtoStack(t *testing.T) {
	for name, src := range genTestEncodingValuesStack() {
		for _, pooling := range []bool{true, false} {
			t.Run(name+"/Pooling="+strconv.FormatBool(pooling), func(t *testing.T) {
				prevPooling := UseProtoPooling.IsEnabled()
				require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), pooling))
				defer func() {
					require.NoError(t, featuregate.GlobalRegistry().Set(UseProtoPooling.ID(), prevPooling))
				}()

				buf := make([]byte, SizeProtoStack(src))
				gotSize := MarshalProtoStack(src, buf)
				assert.Equal(t, len(buf), gotSize)

				dest := NewStack()
				require.NoError(t, UnmarshalProtoStack(dest, buf))

				assert.Equal(t, src, dest)
				DeleteStack(dest, true)
			})
		}
	}
}

func TestMarshalAndUnmarshalProtoViaProtobufStack(t *testing.T) {
	for name, src := range genTestEncodingValuesStack() {
		t.Run(name, func(t *testing.T) {
			buf := make([]byte, SizeProtoStack(src))
			gotSize := MarshalProtoStack(src, buf)
			assert.Equal(t, len(buf), gotSize)

			goDest := &gootlpprofiles.Stack{}
			require.NoError(t, proto.Unmarshal(buf, goDest))

			goBuf, err := proto.Marshal(goDest)
			require.NoError(t, err)

			dest := NewStack()
			require.NoError(t, UnmarshalProtoStack(dest, goBuf))
			assert.Equal(t, src, dest)
		})
	}
}

func genTestFailingUnmarshalProtoValuesStack() map[string][]byte {
	return map[string][]byte{
		"invalid_field":                   {0x02},
		"LocationIndices/wrong_wire_type": {0xc},
		"LocationIndices/missing_value":   {0xa},
	}
}

func genTestEncodingValuesStack() map[string]*otlpprofiles.Stack {
	return map[string]*otlpprofiles.Stack{
		"empty":                            NewStack(),
		"LocationIndices/default_and_test": {LocationIndices: []int32{int32(0), int32(13)}},
	}
}
