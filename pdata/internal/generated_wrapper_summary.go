// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"fmt"
	"sync"

	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

var (
	protoPoolSummary = sync.Pool{
		New: func() any {
			return &otlpmetrics.Summary{}
		},
	}
)

func NewSummary() *otlpmetrics.Summary {
	if !UseProtoPooling.IsEnabled() {
		return &otlpmetrics.Summary{}
	}
	return protoPoolSummary.Get().(*otlpmetrics.Summary)
}

func DeleteSummary(orig *otlpmetrics.Summary, nullable bool) {
	if orig == nil {
		return
	}

	if !UseProtoPooling.IsEnabled() {
		orig.Reset()
		return
	}

	for i := range orig.DataPoints {
		DeleteSummaryDataPoint(orig.DataPoints[i], true)
	}

	orig.Reset()
	if nullable {
		protoPoolSummary.Put(orig)
	}
}

func CopySummary(dest, src *otlpmetrics.Summary) {
	// If copying to same object, just return.
	if src == dest {
		return
	}
	dest.DataPoints = CopySummaryDataPointSlice(dest.DataPoints, src.DataPoints)
}

func GenTestSummary() *otlpmetrics.Summary {
	orig := NewSummary()
	orig.DataPoints = GenTestSummaryDataPointSlice()
	return orig
}

// MarshalJSON marshals all properties from the current struct to the destination stream.
func MarshalJSONSummary(orig *otlpmetrics.Summary, dest *json.Stream) {
	dest.WriteObjectStart()
	if len(orig.DataPoints) > 0 {
		dest.WriteObjectField("dataPoints")
		dest.WriteArrayStart()
		MarshalJSONSummaryDataPoint(orig.DataPoints[0], dest)
		for i := 1; i < len(orig.DataPoints); i++ {
			dest.WriteMore()
			MarshalJSONSummaryDataPoint(orig.DataPoints[i], dest)
		}
		dest.WriteArrayEnd()
	}
	dest.WriteObjectEnd()
}

// UnmarshalJSONSummary unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONSummary(orig *otlpmetrics.Summary, iter *json.Iterator) {
	for f := iter.ReadObject(); f != ""; f = iter.ReadObject() {
		switch f {
		case "dataPoints", "data_points":
			for iter.ReadArray() {
				orig.DataPoints = append(orig.DataPoints, NewSummaryDataPoint())
				UnmarshalJSONSummaryDataPoint(orig.DataPoints[len(orig.DataPoints)-1], iter)
			}

		default:
			iter.Skip()
		}
	}
}

func SizeProtoSummary(orig *otlpmetrics.Summary) int {
	var n int
	var l int
	_ = l
	for i := range orig.DataPoints {
		l = SizeProtoSummaryDataPoint(orig.DataPoints[i])
		n += 1 + proto.Sov(uint64(l)) + l
	}
	return n
}

func MarshalProtoSummary(orig *otlpmetrics.Summary, buf []byte) int {
	pos := len(buf)
	var l int
	_ = l
	for i := len(orig.DataPoints) - 1; i >= 0; i-- {
		l = MarshalProtoSummaryDataPoint(orig.DataPoints[i], buf[:pos])
		pos -= l
		pos = proto.EncodeVarint(buf, pos, uint64(l))
		pos--
		buf[pos] = 0xa
	}
	return len(buf) - pos
}

func UnmarshalProtoSummary(orig *otlpmetrics.Summary, buf []byte) error {
	var err error
	var fieldNum int32
	var wireType proto.WireType

	l := len(buf)
	pos := 0
	for pos < l {
		// If in a group parsing, move to the next tag.
		fieldNum, wireType, pos, err = proto.ConsumeTag(buf, pos)
		if err != nil {
			return err
		}
		switch fieldNum {

		case 1:
			if wireType != proto.WireTypeLen {
				return fmt.Errorf("proto: wrong wireType = %d for field DataPoints", wireType)
			}
			var length int
			length, pos, err = proto.ConsumeLen(buf, pos)
			if err != nil {
				return err
			}
			startPos := pos - length
			orig.DataPoints = append(orig.DataPoints, NewSummaryDataPoint())
			err = UnmarshalProtoSummaryDataPoint(orig.DataPoints[len(orig.DataPoints)-1], buf[startPos:pos])
			if err != nil {
				return err
			}
		default:
			pos, err = proto.ConsumeUnknown(buf, pos, wireType)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
