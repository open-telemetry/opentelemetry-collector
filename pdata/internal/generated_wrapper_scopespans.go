// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"fmt"
	"sync"

	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

var (
	protoPoolScopeSpans = sync.Pool{
		New: func() any {
			return &otlptrace.ScopeSpans{}
		},
	}
)

func NewScopeSpans() *otlptrace.ScopeSpans {
	if !UseProtoPooling.IsEnabled() {
		return &otlptrace.ScopeSpans{}
	}
	return protoPoolScopeSpans.Get().(*otlptrace.ScopeSpans)
}

func DeleteScopeSpans(orig *otlptrace.ScopeSpans, nullable bool) {
	if orig == nil {
		return
	}

	if !UseProtoPooling.IsEnabled() {
		orig.Reset()
		return
	}

	DeleteInstrumentationScope(&orig.Scope, false)
	for i := range orig.Spans {
		DeleteSpan(orig.Spans[i], true)
	}

	orig.Reset()
	if nullable {
		protoPoolScopeSpans.Put(orig)
	}
}

func CopyScopeSpans(dest, src *otlptrace.ScopeSpans) {
	// If copying to same object, just return.
	if src == dest {
		return
	}
	CopyInstrumentationScope(&dest.Scope, &src.Scope)
	dest.Spans = CopySpanSlice(dest.Spans, src.Spans)
	dest.SchemaUrl = src.SchemaUrl
}

func GenTestScopeSpans() *otlptrace.ScopeSpans {
	orig := NewScopeSpans()
	orig.Scope = *GenTestInstrumentationScope()
	orig.Spans = GenTestSpanSlice()
	orig.SchemaUrl = "test_schemaurl"
	return orig
}

// MarshalJSON marshals all properties from the current struct to the destination stream.
func MarshalJSONScopeSpans(orig *otlptrace.ScopeSpans, dest *json.Stream) {
	dest.WriteObjectStart()
	dest.WriteObjectField("scope")
	MarshalJSONInstrumentationScope(&orig.Scope, dest)
	if len(orig.Spans) > 0 {
		dest.WriteObjectField("spans")
		dest.WriteArrayStart()
		MarshalJSONSpan(orig.Spans[0], dest)
		for i := 1; i < len(orig.Spans); i++ {
			dest.WriteMore()
			MarshalJSONSpan(orig.Spans[i], dest)
		}
		dest.WriteArrayEnd()
	}
	if orig.SchemaUrl != "" {
		dest.WriteObjectField("schemaUrl")
		dest.WriteString(orig.SchemaUrl)
	}
	dest.WriteObjectEnd()
}

// UnmarshalJSONScopeSpans unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONScopeSpans(orig *otlptrace.ScopeSpans, iter *json.Iterator) {
	for f := iter.ReadObject(); f != ""; f = iter.ReadObject() {
		switch f {
		case "scope":
			UnmarshalJSONInstrumentationScope(&orig.Scope, iter)
		case "spans":
			for iter.ReadArray() {
				orig.Spans = append(orig.Spans, NewSpan())
				UnmarshalJSONSpan(orig.Spans[len(orig.Spans)-1], iter)
			}

		case "schemaUrl", "schema_url":
			orig.SchemaUrl = iter.ReadString()
		default:
			iter.Skip()
		}
	}
}

func SizeProtoScopeSpans(orig *otlptrace.ScopeSpans) int {
	var n int
	var l int
	_ = l
	l = SizeProtoInstrumentationScope(&orig.Scope)
	n += 1 + proto.Sov(uint64(l)) + l
	for i := range orig.Spans {
		l = SizeProtoSpan(orig.Spans[i])
		n += 1 + proto.Sov(uint64(l)) + l
	}
	l = len(orig.SchemaUrl)
	if l > 0 {
		n += 1 + proto.Sov(uint64(l)) + l
	}
	return n
}

func MarshalProtoScopeSpans(orig *otlptrace.ScopeSpans, buf []byte) int {
	pos := len(buf)
	var l int
	_ = l

	l = MarshalProtoInstrumentationScope(&orig.Scope, buf[:pos])
	pos -= l
	pos = proto.EncodeVarint(buf, pos, uint64(l))
	pos--
	buf[pos] = 0xa

	for i := len(orig.Spans) - 1; i >= 0; i-- {
		l = MarshalProtoSpan(orig.Spans[i], buf[:pos])
		pos -= l
		pos = proto.EncodeVarint(buf, pos, uint64(l))
		pos--
		buf[pos] = 0x12
	}
	l = len(orig.SchemaUrl)
	if l > 0 {
		pos -= l
		copy(buf[pos:], orig.SchemaUrl)
		pos = proto.EncodeVarint(buf, pos, uint64(l))
		pos--
		buf[pos] = 0x1a
	}
	return len(buf) - pos
}

func UnmarshalProtoScopeSpans(orig *otlptrace.ScopeSpans, buf []byte) error {
	var err error
	var fieldNum int32
	var wireType proto.WireType

	l := len(buf)
	pos := 0
	for pos < l {
		// If in a group parsing, move to the next tag.
		fieldNum, wireType, pos, err = proto.ConsumeTag(buf, pos)
		if err != nil {
			return err
		}
		switch fieldNum {

		case 1:
			if wireType != proto.WireTypeLen {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var length int
			length, pos, err = proto.ConsumeLen(buf, pos)
			if err != nil {
				return err
			}
			startPos := pos - length

			err = UnmarshalProtoInstrumentationScope(&orig.Scope, buf[startPos:pos])
			if err != nil {
				return err
			}

		case 2:
			if wireType != proto.WireTypeLen {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var length int
			length, pos, err = proto.ConsumeLen(buf, pos)
			if err != nil {
				return err
			}
			startPos := pos - length
			orig.Spans = append(orig.Spans, NewSpan())
			err = UnmarshalProtoSpan(orig.Spans[len(orig.Spans)-1], buf[startPos:pos])
			if err != nil {
				return err
			}

		case 3:
			if wireType != proto.WireTypeLen {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaUrl", wireType)
			}
			var length int
			length, pos, err = proto.ConsumeLen(buf, pos)
			if err != nil {
				return err
			}
			startPos := pos - length
			orig.SchemaUrl = string(buf[startPos:pos])
		default:
			pos, err = proto.ConsumeUnknown(buf, pos, wireType)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
