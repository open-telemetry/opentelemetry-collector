// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
)

func CopyOrigExponentialHistogramDataPoint(dest, src *otlpmetrics.ExponentialHistogramDataPoint) {
	dest.Attributes = CopyOrigKeyValueSlice(dest.Attributes, src.Attributes)
	dest.StartTimeUnixNano = src.StartTimeUnixNano
	dest.TimeUnixNano = src.TimeUnixNano
	dest.Count = src.Count
	dest.Scale = src.Scale
	dest.ZeroCount = src.ZeroCount
	CopyOrigExponentialHistogramDataPoint_Buckets(&dest.Positive, &src.Positive)
	CopyOrigExponentialHistogramDataPoint_Buckets(&dest.Negative, &src.Negative)
	dest.Exemplars = CopyOrigExemplarSlice(dest.Exemplars, src.Exemplars)
	dest.Flags = src.Flags
	if srcSum, ok := src.Sum_.(*otlpmetrics.ExponentialHistogramDataPoint_Sum); ok {
		destSum, ok := dest.Sum_.(*otlpmetrics.ExponentialHistogramDataPoint_Sum)
		if !ok {
			destSum = &otlpmetrics.ExponentialHistogramDataPoint_Sum{}
			dest.Sum_ = destSum
		}
		destSum.Sum = srcSum.Sum
	} else {
		dest.Sum_ = nil
	}
	if srcMin, ok := src.Min_.(*otlpmetrics.ExponentialHistogramDataPoint_Min); ok {
		destMin, ok := dest.Min_.(*otlpmetrics.ExponentialHistogramDataPoint_Min)
		if !ok {
			destMin = &otlpmetrics.ExponentialHistogramDataPoint_Min{}
			dest.Min_ = destMin
		}
		destMin.Min = srcMin.Min
	} else {
		dest.Min_ = nil
	}
	if srcMax, ok := src.Max_.(*otlpmetrics.ExponentialHistogramDataPoint_Max); ok {
		destMax, ok := dest.Max_.(*otlpmetrics.ExponentialHistogramDataPoint_Max)
		if !ok {
			destMax = &otlpmetrics.ExponentialHistogramDataPoint_Max{}
			dest.Max_ = destMax
		}
		destMax.Max = srcMax.Max
	} else {
		dest.Max_ = nil
	}
	dest.ZeroThreshold = src.ZeroThreshold
}

func FillOrigTestExponentialHistogramDataPoint(orig *otlpmetrics.ExponentialHistogramDataPoint) {
	orig.Attributes = GenerateOrigTestKeyValueSlice()
	orig.StartTimeUnixNano = 1234567890
	orig.TimeUnixNano = 1234567890
	orig.Count = uint64(13)
	orig.Scale = int32(13)
	orig.ZeroCount = uint64(13)
	FillOrigTestExponentialHistogramDataPoint_Buckets(&orig.Positive)
	FillOrigTestExponentialHistogramDataPoint_Buckets(&orig.Negative)
	orig.Exemplars = GenerateOrigTestExemplarSlice()
	orig.Flags = 1
	orig.Sum_ = &otlpmetrics.ExponentialHistogramDataPoint_Sum{Sum: float64(3.1415926)}
	orig.Min_ = &otlpmetrics.ExponentialHistogramDataPoint_Min{Min: float64(3.1415926)}
	orig.Max_ = &otlpmetrics.ExponentialHistogramDataPoint_Max{Max: float64(3.1415926)}
	orig.ZeroThreshold = float64(3.1415926)
}
