// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pcommon

import (
	"testing"

	"github.com/stretchr/testify/assert"

	"go.opentelemetry.io/collector/pdata/internal"
	otlpresource "go.opentelemetry.io/collector/pdata/internal/data/protogen/resource/v1"
)

func TestResourceEntityRef_MoveTo(t *testing.T) {
	ms := generateTestResourceEntityRef()
	dest := NewResourceEntityRef()
	ms.MoveTo(dest)
	assert.Equal(t, NewResourceEntityRef(), ms)
	assert.Equal(t, generateTestResourceEntityRef(), dest)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.MoveTo(newResourceEntityRef(&otlpresource.ResourceEntityRef{}, &sharedState)) })
	assert.Panics(t, func() { newResourceEntityRef(&otlpresource.ResourceEntityRef{}, &sharedState).MoveTo(dest) })
}

func TestResourceEntityRef_CopyTo(t *testing.T) {
	ms := NewResourceEntityRef()
	orig := NewResourceEntityRef()
	orig.CopyTo(ms)
	assert.Equal(t, orig, ms)
	orig = generateTestResourceEntityRef()
	orig.CopyTo(ms)
	assert.Equal(t, orig, ms)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.CopyTo(newResourceEntityRef(&otlpresource.ResourceEntityRef{}, &sharedState)) })
}

func TestResourceEntityRef_SchemaUrl(t *testing.T) {
	ms := NewResourceEntityRef()
	assert.Equal(t, "", ms.SchemaUrl())
	ms.SetSchemaUrl("https://opentelemetry.io/schemas/1.5.0")
	assert.Equal(t, "https://opentelemetry.io/schemas/1.5.0", ms.SchemaUrl())
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() {
		newResourceEntityRef(&otlpresource.ResourceEntityRef{}, &sharedState).SetSchemaUrl("https://opentelemetry.io/schemas/1.5.0")
	})
}

func TestResourceEntityRef_Type(t *testing.T) {
	ms := NewResourceEntityRef()
	assert.Equal(t, "", ms.Type())
	ms.SetType("host")
	assert.Equal(t, "host", ms.Type())
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { newResourceEntityRef(&otlpresource.ResourceEntityRef{}, &sharedState).SetType("host") })
}

func TestResourceEntityRef_IdAttrKeys(t *testing.T) {
	ms := NewResourceEntityRef()
	assert.Equal(t, NewStringSlice(), ms.IdAttrKeys())
	internal.FillTestStringSlice(internal.StringSlice(ms.IdAttrKeys()))
	assert.Equal(t, StringSlice(internal.GenerateTestStringSlice()), ms.IdAttrKeys())
}

func TestResourceEntityRef_DescrAttrKeys(t *testing.T) {
	ms := NewResourceEntityRef()
	assert.Equal(t, NewStringSlice(), ms.DescrAttrKeys())
	internal.FillTestStringSlice(internal.StringSlice(ms.DescrAttrKeys()))
	assert.Equal(t, StringSlice(internal.GenerateTestStringSlice()), ms.DescrAttrKeys())
}

func generateTestResourceEntityRef() ResourceEntityRef {
	return ResourceEntityRef(internal.GenerateTestResourceEntityRef())
}
