// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pcommon

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlpresource "go.opentelemetry.io/collector/pdata/internal/data/protogen/resource/v1"
)

// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewResourceEntityRef function to create new instances.
// Important: zero-initialized instance is not valid for use.
type ResourceEntityRef internal.ResourceEntityRef

func newResourceEntityRef(orig *otlpresource.ResourceEntityRef, state *internal.State) ResourceEntityRef {
	return ResourceEntityRef(internal.NewResourceEntityRef(orig, state))
}

// NewResourceEntityRef creates a new empty ResourceEntityRef.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewResourceEntityRef() ResourceEntityRef {
	state := internal.StateMutable
	return newResourceEntityRef(&otlpresource.ResourceEntityRef{}, &state)
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms ResourceEntityRef) MoveTo(dest ResourceEntityRef) {
	ms.getState().AssertMutable()
	dest.getState().AssertMutable()
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlpresource.ResourceEntityRef{}
}

func (ms ResourceEntityRef) getOrig() *otlpresource.ResourceEntityRef {
	return internal.GetOrigResourceEntityRef(internal.ResourceEntityRef(ms))
}

func (ms ResourceEntityRef) getState() *internal.State {
	return internal.GetResourceEntityRefState(internal.ResourceEntityRef(ms))
}

// SchemaUrl returns the schemaurl associated with this ResourceEntityRef.
func (ms ResourceEntityRef) SchemaUrl() string {
	return ms.getOrig().SchemaUrl
}

// SetSchemaUrl replaces the schemaurl associated with this ResourceEntityRef.
func (ms ResourceEntityRef) SetSchemaUrl(v string) {
	ms.getState().AssertMutable()
	ms.getOrig().SchemaUrl = v
}

// Type returns the type associated with this ResourceEntityRef.
func (ms ResourceEntityRef) Type() string {
	return ms.getOrig().Type
}

// SetType replaces the type associated with this ResourceEntityRef.
func (ms ResourceEntityRef) SetType(v string) {
	ms.getState().AssertMutable()
	ms.getOrig().Type = v
}

// IdAttrKeys returns the IdAttrKeys associated with this ResourceEntityRef.
func (ms ResourceEntityRef) IdAttrKeys() StringSlice {
	return StringSlice(internal.NewStringSlice(&ms.getOrig().IdAttrKeys, internal.GetResourceEntityRefState(internal.ResourceEntityRef(ms))))
}

// DescrAttrKeys returns the DescrAttrKeys associated with this ResourceEntityRef.
func (ms ResourceEntityRef) DescrAttrKeys() StringSlice {
	return StringSlice(internal.NewStringSlice(&ms.getOrig().DescrAttrKeys, internal.GetResourceEntityRefState(internal.ResourceEntityRef(ms))))
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms ResourceEntityRef) CopyTo(dest ResourceEntityRef) {
	dest.getState().AssertMutable()
	dest.SetSchemaUrl(ms.SchemaUrl())
	dest.SetType(ms.Type())
	ms.IdAttrKeys().CopyTo(dest.IdAttrKeys())
	ms.DescrAttrKeys().CopyTo(dest.DescrAttrKeys())
}
