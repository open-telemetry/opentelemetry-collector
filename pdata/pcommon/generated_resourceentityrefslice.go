// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pcommon

import (
	"sort"

	"go.opentelemetry.io/collector/pdata/internal"
	otlpresource "go.opentelemetry.io/collector/pdata/internal/data/protogen/resource/v1"
)

// ResourceEntityRefSlice logically represents a slice of ResourceEntityRef.
//
// This is a reference type. If passed by value and callee modifies it, the
// caller will see the modification.
//
// Must use NewResourceEntityRefSlice function to create new instances.
// Important: zero-initialized instance is not valid for use.
type ResourceEntityRefSlice internal.ResourceEntityRefSlice

func newResourceEntityRefSlice(orig *[]*otlpresource.ResourceEntityRef, state *internal.State) ResourceEntityRefSlice {
	return ResourceEntityRefSlice(internal.NewResourceEntityRefSlice(orig, state))
}

// NewResourceEntityRefSlice creates a ResourceEntityRefSlice with 0 elements.
// Can use "EnsureCapacity" to initialize with a given capacity.
func NewResourceEntityRefSlice() ResourceEntityRefSlice {
	orig := []*otlpresource.ResourceEntityRef(nil)
	state := internal.StateMutable
	return newResourceEntityRefSlice(&orig, &state)
}

// Len returns the number of elements in the slice.
//
// Returns "0" for a newly instance created with "NewResourceEntityRefSlice()".
func (es ResourceEntityRefSlice) Len() int {
	return len(*es.getOrig())
}

// At returns the element at the given index.
//
// This function is used mostly for iterating over all the values in the slice:
//
//	for i := 0; i < es.Len(); i++ {
//	    e := es.At(i)
//	    ... // Do something with the element
//	}
func (es ResourceEntityRefSlice) At(i int) ResourceEntityRef {
	return newResourceEntityRef((*es.getOrig())[i], es.getState())
}

// EnsureCapacity is an operation that ensures the slice has at least the specified capacity.
// 1. If the newCap <= cap then no change in capacity.
// 2. If the newCap > cap then the slice capacity will be expanded to equal newCap.
//
// Here is how a new ResourceEntityRefSlice can be initialized:
//
//	es := NewResourceEntityRefSlice()
//	es.EnsureCapacity(4)
//	for i := 0; i < 4; i++ {
//	    e := es.AppendEmpty()
//	    // Here should set all the values for e.
//	}
func (es ResourceEntityRefSlice) EnsureCapacity(newCap int) {
	es.getState().AssertMutable()
	oldCap := cap(*es.getOrig())
	if newCap <= oldCap {
		return
	}

	newOrig := make([]*otlpresource.ResourceEntityRef, len(*es.getOrig()), newCap)
	copy(newOrig, *es.getOrig())
	*es.getOrig() = newOrig
}

// AppendEmpty will append to the end of the slice an empty ResourceEntityRef.
// It returns the newly added ResourceEntityRef.
func (es ResourceEntityRefSlice) AppendEmpty() ResourceEntityRef {
	es.getState().AssertMutable()
	*es.getOrig() = append(*es.getOrig(), &otlpresource.ResourceEntityRef{})
	return es.At(es.Len() - 1)
}

// MoveAndAppendTo moves all elements from the current slice and appends them to the dest.
// The current slice will be cleared.
func (es ResourceEntityRefSlice) MoveAndAppendTo(dest ResourceEntityRefSlice) {
	es.getState().AssertMutable()
	dest.getState().AssertMutable()
	if *dest.getOrig() == nil {
		// We can simply move the entire vector and avoid any allocations.
		*dest.getOrig() = *es.getOrig()
	} else {
		*dest.getOrig() = append(*dest.getOrig(), *es.getOrig()...)
	}
	*es.getOrig() = nil
}

// RemoveIf calls f sequentially for each element present in the slice.
// If f returns true, the element is removed from the slice.
func (es ResourceEntityRefSlice) RemoveIf(f func(ResourceEntityRef) bool) {
	es.getState().AssertMutable()
	newLen := 0
	for i := 0; i < len(*es.getOrig()); i++ {
		if f(es.At(i)) {
			continue
		}
		if newLen == i {
			// Nothing to move, element is at the right place.
			newLen++
			continue
		}
		(*es.getOrig())[newLen] = (*es.getOrig())[i]
		newLen++
	}
	*es.getOrig() = (*es.getOrig())[:newLen]
}

// CopyTo copies all elements from the current slice overriding the destination.
func (es ResourceEntityRefSlice) CopyTo(dest ResourceEntityRefSlice) {
	dest.getState().AssertMutable()
	srcLen := es.Len()
	destCap := cap(*dest.getOrig())
	if srcLen <= destCap {
		(*dest.getOrig()) = (*dest.getOrig())[:srcLen:destCap]
		for i := range *es.getOrig() {
			newResourceEntityRef((*es.getOrig())[i], es.getState()).CopyTo(newResourceEntityRef((*dest.getOrig())[i], dest.getState()))
		}
		return
	}
	origs := make([]otlpresource.ResourceEntityRef, srcLen)
	wrappers := make([]*otlpresource.ResourceEntityRef, srcLen)
	for i := range *es.getOrig() {
		wrappers[i] = &origs[i]
		newResourceEntityRef((*es.getOrig())[i], es.getState()).CopyTo(newResourceEntityRef(wrappers[i], dest.getState()))
	}
	*dest.getOrig() = wrappers
}

// Sort sorts the ResourceEntityRef elements within ResourceEntityRefSlice given the
// provided less function so that two instances of ResourceEntityRefSlice
// can be compared.
func (es ResourceEntityRefSlice) Sort(less func(a, b ResourceEntityRef) bool) {
	es.getState().AssertMutable()
	sort.SliceStable(*es.getOrig(), func(i, j int) bool { return less(es.At(i), es.At(j)) })
}

func (ms ResourceEntityRefSlice) getOrig() *[]*otlpresource.ResourceEntityRef {
	return internal.GetOrigResourceEntityRefSlice(internal.ResourceEntityRefSlice(ms))
}

func (ms ResourceEntityRefSlice) getState() *internal.State {
	return internal.GetResourceEntityRefSliceState(internal.ResourceEntityRefSlice(ms))
}
