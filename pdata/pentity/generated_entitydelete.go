// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pentity

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlpentities "go.opentelemetry.io/collector/pdata/internal/data/protogen/entities/v1"
)

// EntityDelete are experimental implementation of OpenTelemetry Entity Data Model.

// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewEntityDelete function to create new instances.
// Important: zero-initialized instance is not valid for use.
type EntityDelete struct {
	orig  *otlpentities.EntityDelete
	state *internal.State
}

func newEntityDelete(orig *otlpentities.EntityDelete, state *internal.State) EntityDelete {
	return EntityDelete{orig: orig, state: state}
}

// NewEntityDelete creates a new empty EntityDelete.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewEntityDelete() EntityDelete {
	state := internal.StateMutable
	return newEntityDelete(&otlpentities.EntityDelete{}, &state)
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms EntityDelete) MoveTo(dest EntityDelete) {
	ms.state.AssertMutable()
	dest.state.AssertMutable()
	*dest.orig = *ms.orig
	*ms.orig = otlpentities.EntityDelete{}
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms EntityDelete) CopyTo(dest EntityDelete) {
	dest.state.AssertMutable()
}
