// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pentity

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlpentities "go.opentelemetry.io/collector/pdata/internal/data/protogen/entities/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ScopeEntities is a collection of entities from a LibraryInstrumentation.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewScopeEntities function to create new instances.
// Important: zero-initialized instance is not valid for use.
type ScopeEntities struct {
	orig  *otlpentities.ScopeEntities
	state *internal.State
}

func newScopeEntities(orig *otlpentities.ScopeEntities, state *internal.State) ScopeEntities {
	return ScopeEntities{orig: orig, state: state}
}

// NewScopeEntities creates a new empty ScopeEntities.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewScopeEntities() ScopeEntities {
	state := internal.StateMutable
	return newScopeEntities(&otlpentities.ScopeEntities{}, &state)
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms ScopeEntities) MoveTo(dest ScopeEntities) {
	ms.state.AssertMutable()
	dest.state.AssertMutable()
	*dest.orig = *ms.orig
	*ms.orig = otlpentities.ScopeEntities{}
}

// Scope returns the scope associated with this ScopeEntities.
func (ms ScopeEntities) Scope() pcommon.InstrumentationScope {
	return pcommon.InstrumentationScope(internal.NewInstrumentationScope(&ms.orig.Scope, ms.state))
}

// SchemaUrl returns the schemaurl associated with this ScopeEntities.
func (ms ScopeEntities) SchemaUrl() string {
	return ms.orig.SchemaUrl
}

// SetSchemaUrl replaces the schemaurl associated with this ScopeEntities.
func (ms ScopeEntities) SetSchemaUrl(v string) {
	ms.state.AssertMutable()
	ms.orig.SchemaUrl = v
}

// EntityEvents returns the EntityEvents associated with this ScopeEntities.
func (ms ScopeEntities) EntityEvents() EntityEventSlice {
	return newEntityEventSlice(&ms.orig.EntityEvents, ms.state)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms ScopeEntities) CopyTo(dest ScopeEntities) {
	dest.state.AssertMutable()
	ms.Scope().CopyTo(dest.Scope())
	dest.SetSchemaUrl(ms.SchemaUrl())
	ms.EntityEvents().CopyTo(dest.EntityEvents())
}
