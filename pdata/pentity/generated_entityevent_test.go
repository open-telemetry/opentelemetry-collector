// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pentity

import (
	"testing"

	"github.com/stretchr/testify/assert"

	"go.opentelemetry.io/collector/pdata/internal"
	otlpentities "go.opentelemetry.io/collector/pdata/internal/data/protogen/entities/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

func TestEntityEvent_MoveTo(t *testing.T) {
	ms := generateTestEntityEvent()
	dest := NewEntityEvent()
	ms.MoveTo(dest)
	assert.Equal(t, NewEntityEvent(), ms)
	assert.Equal(t, generateTestEntityEvent(), dest)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.MoveTo(newEntityEvent(&otlpentities.EntityEvent{}, &sharedState)) })
	assert.Panics(t, func() { newEntityEvent(&otlpentities.EntityEvent{}, &sharedState).MoveTo(dest) })
}

func TestEntityEvent_CopyTo(t *testing.T) {
	ms := NewEntityEvent()
	orig := NewEntityEvent()
	orig.CopyTo(ms)
	assert.Equal(t, orig, ms)
	orig = generateTestEntityEvent()
	orig.CopyTo(ms)
	assert.Equal(t, orig, ms)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.CopyTo(newEntityEvent(&otlpentities.EntityEvent{}, &sharedState)) })
}

func TestEntityEvent_Timestamp(t *testing.T) {
	ms := NewEntityEvent()
	assert.Equal(t, pcommon.Timestamp(0), ms.Timestamp())
	testValTimestamp := pcommon.Timestamp(1234567890)
	ms.SetTimestamp(testValTimestamp)
	assert.Equal(t, testValTimestamp, ms.Timestamp())
}

func TestEntityEvent_EntityType(t *testing.T) {
	ms := NewEntityEvent()
	assert.Equal(t, "", ms.EntityType())
	ms.SetEntityType("service")
	assert.Equal(t, "service", ms.EntityType())
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { newEntityEvent(&otlpentities.EntityEvent{}, &sharedState).SetEntityType("service") })
}

func TestEntityEvent_Id(t *testing.T) {
	ms := NewEntityEvent()
	assert.Equal(t, pcommon.NewMap(), ms.Id())
	internal.FillTestMap(internal.Map(ms.Id()))
	assert.Equal(t, pcommon.Map(internal.GenerateTestMap()), ms.Id())
}

func TestEntityEvent_Type(t *testing.T) {
	tv := NewEntityEvent()
	assert.Equal(t, EventTypeEmpty, tv.Type())
}

func TestEntityEvent_EntityState(t *testing.T) {
	ms := NewEntityEvent()
	fillTestEntityState(ms.SetEmptyEntityState())
	assert.Equal(t, EventTypeEntityState, ms.Type())
	assert.Equal(t, generateTestEntityState(), ms.EntityState())
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { newEntityEvent(&otlpentities.EntityEvent{}, &sharedState).SetEmptyEntityState() })
}

func TestEntityEvent_CopyTo_EntityState(t *testing.T) {
	ms := NewEntityEvent()
	fillTestEntityState(ms.SetEmptyEntityState())
	dest := NewEntityEvent()
	ms.CopyTo(dest)
	assert.Equal(t, ms, dest)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.CopyTo(newEntityEvent(&otlpentities.EntityEvent{}, &sharedState)) })
}

func TestEntityEvent_EntityDelete(t *testing.T) {
	ms := NewEntityEvent()
	fillTestEntityDelete(ms.SetEmptyEntityDelete())
	assert.Equal(t, EventTypeEntityDelete, ms.Type())
	assert.Equal(t, generateTestEntityDelete(), ms.EntityDelete())
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { newEntityEvent(&otlpentities.EntityEvent{}, &sharedState).SetEmptyEntityDelete() })
}

func TestEntityEvent_CopyTo_EntityDelete(t *testing.T) {
	ms := NewEntityEvent()
	fillTestEntityDelete(ms.SetEmptyEntityDelete())
	dest := NewEntityEvent()
	ms.CopyTo(dest)
	assert.Equal(t, ms, dest)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.CopyTo(newEntityEvent(&otlpentities.EntityEvent{}, &sharedState)) })
}

func generateTestEntityEvent() EntityEvent {
	tv := NewEntityEvent()
	fillTestEntityEvent(tv)
	return tv
}

func fillTestEntityEvent(tv EntityEvent) {
	tv.orig.TimeUnixNano = 1234567890
	tv.orig.EntityType = "service"
	internal.FillTestMap(internal.NewMap(&tv.orig.Id, tv.state))
	tv.orig.Data = &otlpentities.EntityEvent_EntityDelete{EntityDelete: &otlpentities.EntityDelete{}}
	fillTestEntityDelete(newEntityDelete(tv.orig.GetEntityDelete(), tv.state))
}
