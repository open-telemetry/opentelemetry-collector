// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pentity

import (
	"testing"

	"github.com/stretchr/testify/assert"

	"go.opentelemetry.io/collector/pdata/internal"
	otlpentities "go.opentelemetry.io/collector/pdata/internal/data/protogen/entities/v1"
)

func TestEntityDelete_MoveTo(t *testing.T) {
	ms := generateTestEntityDelete()
	dest := NewEntityDelete()
	ms.MoveTo(dest)
	assert.Equal(t, NewEntityDelete(), ms)
	assert.Equal(t, generateTestEntityDelete(), dest)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.MoveTo(newEntityDelete(&otlpentities.EntityDelete{}, &sharedState)) })
	assert.Panics(t, func() { newEntityDelete(&otlpentities.EntityDelete{}, &sharedState).MoveTo(dest) })
}

func TestEntityDelete_CopyTo(t *testing.T) {
	ms := NewEntityDelete()
	orig := NewEntityDelete()
	orig.CopyTo(ms)
	assert.Equal(t, orig, ms)
	orig = generateTestEntityDelete()
	orig.CopyTo(ms)
	assert.Equal(t, orig, ms)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.CopyTo(newEntityDelete(&otlpentities.EntityDelete{}, &sharedState)) })
}

func generateTestEntityDelete() EntityDelete {
	tv := NewEntityDelete()
	fillTestEntityDelete(tv)
	return tv
}

func fillTestEntityDelete(tv EntityDelete) {
}
