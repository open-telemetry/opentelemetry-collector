// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pentity

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlpentities "go.opentelemetry.io/collector/pdata/internal/data/protogen/entities/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// EntityEvent are experimental implementation of OpenTelemetry Entity Data Model.

// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewEntityEvent function to create new instances.
// Important: zero-initialized instance is not valid for use.
type EntityEvent struct {
	orig  *otlpentities.EntityEvent
	state *internal.State
}

func newEntityEvent(orig *otlpentities.EntityEvent, state *internal.State) EntityEvent {
	return EntityEvent{orig: orig, state: state}
}

// NewEntityEvent creates a new empty EntityEvent.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewEntityEvent() EntityEvent {
	state := internal.StateMutable
	return newEntityEvent(&otlpentities.EntityEvent{}, &state)
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms EntityEvent) MoveTo(dest EntityEvent) {
	ms.state.AssertMutable()
	dest.state.AssertMutable()
	*dest.orig = *ms.orig
	*ms.orig = otlpentities.EntityEvent{}
}

// Timestamp returns the timestamp associated with this EntityEvent.
func (ms EntityEvent) Timestamp() pcommon.Timestamp {
	return pcommon.Timestamp(ms.orig.TimeUnixNano)
}

// SetTimestamp replaces the timestamp associated with this EntityEvent.
func (ms EntityEvent) SetTimestamp(v pcommon.Timestamp) {
	ms.state.AssertMutable()
	ms.orig.TimeUnixNano = uint64(v)
}

// EntityType returns the entitytype associated with this EntityEvent.
func (ms EntityEvent) EntityType() string {
	return ms.orig.EntityType
}

// SetEntityType replaces the entitytype associated with this EntityEvent.
func (ms EntityEvent) SetEntityType(v string) {
	ms.state.AssertMutable()
	ms.orig.EntityType = v
}

// Id returns the Id associated with this EntityEvent.
func (ms EntityEvent) Id() pcommon.Map {
	return pcommon.Map(internal.NewMap(&ms.orig.Id, ms.state))
}

// Type returns the type of the data for this EntityEvent.
// Calling this function on zero-initialized EntityEvent will cause a panic.
func (ms EntityEvent) Type() EventType {
	switch ms.orig.Data.(type) {
	case *otlpentities.EntityEvent_EntityState:
		return EventTypeEntityState
	case *otlpentities.EntityEvent_EntityDelete:
		return EventTypeEntityDelete
	}
	return EventTypeEmpty
}

// EntityState returns the entitystate associated with this EntityEvent.
//
// Calling this function when Type() != EventTypeEntityState returns an invalid
// zero-initialized instance of EntityState. Note that using such EntityState instance can cause panic.
//
// Calling this function on zero-initialized EntityEvent will cause a panic.
func (ms EntityEvent) EntityState() EntityState {
	v, ok := ms.orig.GetData().(*otlpentities.EntityEvent_EntityState)
	if !ok {
		return EntityState{}
	}
	return newEntityState(v.EntityState, ms.state)
}

// SetEmptyEntityState sets an empty entitystate to this EntityEvent.
//
// After this, Type() function will return EventTypeEntityState".
//
// Calling this function on zero-initialized EntityEvent will cause a panic.
func (ms EntityEvent) SetEmptyEntityState() EntityState {
	ms.state.AssertMutable()
	val := &otlpentities.EntityState{}
	ms.orig.Data = &otlpentities.EntityEvent_EntityState{EntityState: val}
	return newEntityState(val, ms.state)
}

// EntityDelete returns the entitydelete associated with this EntityEvent.
//
// Calling this function when Type() != EventTypeEntityDelete returns an invalid
// zero-initialized instance of EntityDelete. Note that using such EntityDelete instance can cause panic.
//
// Calling this function on zero-initialized EntityEvent will cause a panic.
func (ms EntityEvent) EntityDelete() EntityDelete {
	v, ok := ms.orig.GetData().(*otlpentities.EntityEvent_EntityDelete)
	if !ok {
		return EntityDelete{}
	}
	return newEntityDelete(v.EntityDelete, ms.state)
}

// SetEmptyEntityDelete sets an empty entitydelete to this EntityEvent.
//
// After this, Type() function will return EventTypeEntityDelete".
//
// Calling this function on zero-initialized EntityEvent will cause a panic.
func (ms EntityEvent) SetEmptyEntityDelete() EntityDelete {
	ms.state.AssertMutable()
	val := &otlpentities.EntityDelete{}
	ms.orig.Data = &otlpentities.EntityEvent_EntityDelete{EntityDelete: val}
	return newEntityDelete(val, ms.state)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms EntityEvent) CopyTo(dest EntityEvent) {
	dest.state.AssertMutable()
	dest.SetTimestamp(ms.Timestamp())
	dest.SetEntityType(ms.EntityType())
	ms.Id().CopyTo(dest.Id())
	switch ms.Type() {
	case EventTypeEntityState:
		ms.EntityState().CopyTo(dest.SetEmptyEntityState())
	case EventTypeEntityDelete:
		ms.EntityDelete().CopyTo(dest.SetEmptyEntityDelete())
	}

}
