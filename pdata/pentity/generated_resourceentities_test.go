// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pentity

import (
	"testing"

	"github.com/stretchr/testify/assert"

	"go.opentelemetry.io/collector/pdata/internal"
	otlpentities "go.opentelemetry.io/collector/pdata/internal/data/protogen/entities/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

func TestResourceEntities_MoveTo(t *testing.T) {
	ms := generateTestResourceEntities()
	dest := NewResourceEntities()
	ms.MoveTo(dest)
	assert.Equal(t, NewResourceEntities(), ms)
	assert.Equal(t, generateTestResourceEntities(), dest)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.MoveTo(newResourceEntities(&otlpentities.ResourceEntities{}, &sharedState)) })
	assert.Panics(t, func() { newResourceEntities(&otlpentities.ResourceEntities{}, &sharedState).MoveTo(dest) })
}

func TestResourceEntities_CopyTo(t *testing.T) {
	ms := NewResourceEntities()
	orig := NewResourceEntities()
	orig.CopyTo(ms)
	assert.Equal(t, orig, ms)
	orig = generateTestResourceEntities()
	orig.CopyTo(ms)
	assert.Equal(t, orig, ms)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.CopyTo(newResourceEntities(&otlpentities.ResourceEntities{}, &sharedState)) })
}

func TestResourceEntities_Resource(t *testing.T) {
	ms := NewResourceEntities()
	internal.FillTestResource(internal.Resource(ms.Resource()))
	assert.Equal(t, pcommon.Resource(internal.GenerateTestResource()), ms.Resource())
}

func TestResourceEntities_SchemaUrl(t *testing.T) {
	ms := NewResourceEntities()
	assert.Equal(t, "", ms.SchemaUrl())
	ms.SetSchemaUrl("https://opentelemetry.io/schemas/1.5.0")
	assert.Equal(t, "https://opentelemetry.io/schemas/1.5.0", ms.SchemaUrl())
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() {
		newResourceEntities(&otlpentities.ResourceEntities{}, &sharedState).SetSchemaUrl("https://opentelemetry.io/schemas/1.5.0")
	})
}

func TestResourceEntities_ScopeEntities(t *testing.T) {
	ms := NewResourceEntities()
	assert.Equal(t, NewScopeEntitiesSlice(), ms.ScopeEntities())
	fillTestScopeEntitiesSlice(ms.ScopeEntities())
	assert.Equal(t, generateTestScopeEntitiesSlice(), ms.ScopeEntities())
}

func generateTestResourceEntities() ResourceEntities {
	tv := NewResourceEntities()
	fillTestResourceEntities(tv)
	return tv
}

func fillTestResourceEntities(tv ResourceEntities) {
	internal.FillTestResource(internal.NewResource(&tv.orig.Resource, tv.state))
	tv.orig.SchemaUrl = "https://opentelemetry.io/schemas/1.5.0"
	fillTestScopeEntitiesSlice(newScopeEntitiesSlice(&tv.orig.ScopeEntities, tv.state))
}
