// Code generated by "go.opentelemetry.io/collector/cmd/builder". DO NOT EDIT.

// Program otelcorecol is an OpenTelemetry Collector utility to generate docs.
package main

import (
	_ "embed"
	"os"
	"strings"
	"text/template"

	"go.opentelemetry.io/collector/component"
	forwardconnector "go.opentelemetry.io/collector/connector/forwardconnector"
	debugexporter "go.opentelemetry.io/collector/exporter/debugexporter"
	nopexporter "go.opentelemetry.io/collector/exporter/nopexporter"
	otlpexporter "go.opentelemetry.io/collector/exporter/otlpexporter"
	otlphttpexporter "go.opentelemetry.io/collector/exporter/otlphttpexporter"
	memorylimiterextension "go.opentelemetry.io/collector/extension/memorylimiterextension"
	zpagesextension "go.opentelemetry.io/collector/extension/zpagesextension"
	batchprocessor "go.opentelemetry.io/collector/processor/batchprocessor"
	memorylimiterprocessor "go.opentelemetry.io/collector/processor/memorylimiterprocessor"
	nopreceiver "go.opentelemetry.io/collector/receiver/nopreceiver"
	otlpreceiver "go.opentelemetry.io/collector/receiver/otlpreceiver"
)

//go:embed md.tmpl
var mdBytes []byte

type ComponentInfo struct {
	Name    string
	GoMod   string
	Factory component.Factory
}

func (c ComponentInfo) URL() string {
	return strings.Split(c.GoMod, " ")[0]
}

func (c ComponentInfo) Version() string {
	return strings.Split(c.GoMod, " ")[1]
}

func main() {
	buildInfo := component.BuildInfo{
		Command:     "otelcorecol",
		Description: "Local OpenTelemetry Collector binary, testing only.",
		Version:     "0.120.0-dev",
	}

	info := struct {
		BuildInfo  component.BuildInfo
		Connectors []ComponentInfo
		Exporters  []ComponentInfo
		Extensions []ComponentInfo
		Processors []ComponentInfo
		Receivers  []ComponentInfo
	}{
		BuildInfo: buildInfo,
		Connectors: []ComponentInfo{
			{Name: "forwardconnector", GoMod: "go.opentelemetry.io/collector/connector/forwardconnector v0.120.0", Factory: forwardconnector.NewFactory()},
		},
		Exporters: []ComponentInfo{
			{Name: "debugexporter", GoMod: "go.opentelemetry.io/collector/exporter/debugexporter v0.120.0", Factory: debugexporter.NewFactory()},
			{Name: "nopexporter", GoMod: "go.opentelemetry.io/collector/exporter/nopexporter v0.120.0", Factory: nopexporter.NewFactory()},
			{Name: "otlpexporter", GoMod: "go.opentelemetry.io/collector/exporter/otlpexporter v0.120.0", Factory: otlpexporter.NewFactory()},
			{Name: "otlphttpexporter", GoMod: "go.opentelemetry.io/collector/exporter/otlphttpexporter v0.120.0", Factory: otlphttpexporter.NewFactory()},
		},
		Extensions: []ComponentInfo{
			{Name: "memorylimiterextension", GoMod: "go.opentelemetry.io/collector/extension/memorylimiterextension v0.120.0", Factory: memorylimiterextension.NewFactory()},
			{Name: "zpagesextension", GoMod: "go.opentelemetry.io/collector/extension/zpagesextension v0.120.0", Factory: zpagesextension.NewFactory()},
		},
		Processors: []ComponentInfo{
			{Name: "batchprocessor", GoMod: "go.opentelemetry.io/collector/processor/batchprocessor v0.120.0", Factory: batchprocessor.NewFactory()},
			{Name: "memorylimiterprocessor", GoMod: "go.opentelemetry.io/collector/processor/memorylimiterprocessor v0.120.0", Factory: memorylimiterprocessor.NewFactory()},
		},
		Receivers: []ComponentInfo{
			{Name: "nopreceiver", GoMod: "go.opentelemetry.io/collector/receiver/nopreceiver v0.120.0", Factory: nopreceiver.NewFactory()},
			{Name: "otlpreceiver", GoMod: "go.opentelemetry.io/collector/receiver/otlpreceiver v0.120.0", Factory: otlpreceiver.NewFactory()},
		},
	}

	templateBytes := mdBytes
	if len(os.Args) > 1 {
		templateFile := os.Args[1]
		b, err := os.ReadFile(templateFile)
		if err != nil {
			panic(err)
		}
		templateBytes = b
	}

	tmpl := template.Must(template.New("").Parse(string(templateBytes)))
	err := tmpl.Execute(os.Stdout, info)
	if err != nil {
		panic(err)
	}
}
