// Code generated by "go.opentelemetry.io/collector/cmd/builder". DO NOT EDIT.

// Program {{ .Distribution.Name }} is an OpenTelemetry Collector utility to generate docs.
package main

import (
	_ "embed"
	"text/template"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap"
	{{- range.ConfmapConverters }}
	{{.Name}} "{{.Import}}"
	{{- end }}
	{{- range.ConfmapProviders }}
	{{.Name}} "{{.Import}}"
	{{- end }}
	"go.opentelemetry.io/collector/otelcol"
	{{- range .Connectors}}
  {{.Name}} "{{.Import}}"
  {{- end}}
  {{- range .Exporters}}
  {{.Name}} "{{.Import}}"
  {{- end}}
  {{- range .Extensions}}
  {{.Name}} "{{.Import}}"
  {{- end}}
  {{- range .Processors}}
  {{.Name}} "{{.Import}}"
  {{- end}}
  {{- range .Receivers}}
  {{.Name}} "{{.Import}}"
  {{- end}}
)

//go:embed md.tmpl
var mdBytes []byte

type ComponentInfo struct {
	Name string
	GoMod string
	Factory component.Factory
}

func (c ComponentInfo) URL() string {
	return strings.Split(c.GoMod, " ")[0]
}

func (c ComponentInfo) Version() string {
	return strings.Split(c.GoMod, " ")[1]
}

func main() {
	buildInfo := component.BuildInfo{
		Command:     "{{ .Distribution.Name }}",
		Description: "{{ .Distribution.Description }}",
		Version:     "{{ .Distribution.Version }}",
	}



	info := struct{
			BuildInfo component.BuildInfo
			Connectors []ComponentInfo
			Exporters []ComponentInfo
			Extensions []ComponentInfo
			Processors []ComponentInfo
			Receivers []ComponentInfo
		}{
			BuildInfo: buildInfo,
			Connectors: []ComponentInfo{
				{{- range .Connectors}}
				ComponentInfo{ Name: "{{.Name}}", GoMod: "{{.GoMod}}", Factory: {{.Name}}.NewFactory()  },
        {{- end}}
			},
			Exporters: []ComponentInfo{
				{{- range .Exporters}}
				ComponentInfo{ Name: "{{.Name}}", GoMod: "{{.GoMod}}", Factory: {{.Name}}.NewFactory()  },
        {{- end}}
			},
			Extensions: []ComponentInfo{
				{{- range .Extensions}}
				ComponentInfo{ Name: "{{.Name}}", GoMod: "{{.GoMod}}", Factory: {{.Name}}.NewFactory()  },
        {{- end}}
			},
			Processors: []ComponentInfo{
				{{- range .Processors}}
				ComponentInfo{ Name: "{{.Name}}", GoMod: "{{.GoMod}}", Factory: {{.Name}}.NewFactory()  },
        {{- end}}
			},
			Receivers: []ComponentInfo{
				{{- range .Receivers}}
				ComponentInfo{ Name: "{{.Name}}", GoMod: "{{.GoMod}}", Factory: {{.Name}}.NewFactory()  },
        {{- end}}
			},
	}

	templateBytes := mdBytes
	if len(os.Args) > 1 {
		templateFile := os.Args[1]
		b, err := os.ReadFile(templateFile)
		if err != nil {
			panic(err)
		}
		templateBytes = b
	}

	tmpl := template.Must(template.New("").Parse(string(templateBytes)))
	err := tmpl.Execute(os.Stdout, info)
	if err != nil {
  	panic(err)
  }
}
