// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"

	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/confmap/confmaptest"
)

func TestMetricsBuilderConfig(t *testing.T) {
	tests := []struct {
		name string
		want MetricsBuilderConfig
	}{
		{
			name: "default",
			want: DefaultMetricsBuilderConfig(),
		},
		{
			name: "all_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
					DefaultMetric: MetricConfig{
						Enabled:             true,
						AggregationStrategy: AggregationStrategySum},
					DefaultMetricToBeRemoved: MetricConfig{
						Enabled:             true,
						AggregationStrategy: AggregationStrategySum},
					MetricInputType: MetricConfig{
						Enabled:             true,
						AggregationStrategy: AggregationStrategySum},
					OptionalMetric: MetricConfig{
						Enabled: true, AggregationStrategy: AggregationStrategyAvg},
					OptionalMetricEmptyUnit: MetricConfig{
						Enabled: true, AggregationStrategy: AggregationStrategyAvg},
				},
				Attributes: AttributesConfig{
					BooleanAttr: AttributeConfig{
						Enabled: true,
					},
					BooleanAttr2: AttributeConfig{
						Enabled: true,
					},
					EnumAttr: AttributeConfig{
						Enabled: true,
					},
					MapAttr: AttributeConfig{
						Enabled: true,
					},
					OptionalIntAttr: AttributeConfig{
						Enabled: true,
					},
					OptionalStringAttr: AttributeConfig{
						Enabled: true,
					},
					OverriddenIntAttr: AttributeConfig{
						Enabled: true,
					},
					SliceAttr: AttributeConfig{
						Enabled: true,
					},
					StringAttr: AttributeConfig{
						Enabled: true,
					},
				},
				ResourceAttributes: ResourceAttributesConfig{
					MapResourceAttr:                  ResourceAttributeConfig{Enabled: true},
					OptionalResourceAttr:             ResourceAttributeConfig{Enabled: true},
					SliceResourceAttr:                ResourceAttributeConfig{Enabled: true},
					StringEnumResourceAttr:           ResourceAttributeConfig{Enabled: true},
					StringResourceAttr:               ResourceAttributeConfig{Enabled: true},
					StringResourceAttrDisableWarning: ResourceAttributeConfig{Enabled: true},
					StringResourceAttrRemoveWarning:  ResourceAttributeConfig{Enabled: true},
					StringResourceAttrToBeRemoved:    ResourceAttributeConfig{Enabled: true},
				},
			},
		},
		{
			name: "none_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
					DefaultMetric: MetricConfig{
						Enabled:             false,
						AggregationStrategy: AggregationStrategySum},
					DefaultMetricToBeRemoved: MetricConfig{
						Enabled:             false,
						AggregationStrategy: AggregationStrategySum},
					MetricInputType: MetricConfig{
						Enabled:             false,
						AggregationStrategy: AggregationStrategySum},
					OptionalMetric: MetricConfig{
						Enabled: false, AggregationStrategy: AggregationStrategyAvg},
					OptionalMetricEmptyUnit: MetricConfig{
						Enabled: false, AggregationStrategy: AggregationStrategyAvg},
				},
				Attributes: AttributesConfig{
					BooleanAttr: AttributeConfig{
						Enabled: false,
					},
					BooleanAttr2: AttributeConfig{
						Enabled: false,
					},
					EnumAttr: AttributeConfig{
						Enabled: false,
					},
					MapAttr: AttributeConfig{
						Enabled: false,
					},
					OptionalIntAttr: AttributeConfig{
						Enabled: false,
					},
					OptionalStringAttr: AttributeConfig{
						Enabled: false,
					},
					OverriddenIntAttr: AttributeConfig{
						Enabled: false,
					},
					SliceAttr: AttributeConfig{
						Enabled: false,
					},
					StringAttr: AttributeConfig{
						Enabled: false,
					},
				},
				ResourceAttributes: ResourceAttributesConfig{
					MapResourceAttr:                  ResourceAttributeConfig{Enabled: false},
					OptionalResourceAttr:             ResourceAttributeConfig{Enabled: false},
					SliceResourceAttr:                ResourceAttributeConfig{Enabled: false},
					StringEnumResourceAttr:           ResourceAttributeConfig{Enabled: false},
					StringResourceAttr:               ResourceAttributeConfig{Enabled: false},
					StringResourceAttrDisableWarning: ResourceAttributeConfig{Enabled: false},
					StringResourceAttrRemoveWarning:  ResourceAttributeConfig{Enabled: false},
					StringResourceAttrToBeRemoved:    ResourceAttributeConfig{Enabled: false},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadMetricsBuilderConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(MetricConfig{}, ResourceAttributeConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadMetricsBuilderConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, sub.Unmarshal(&cfg, confmap.WithIgnoreUnused()))
	return cfg
}

func loadLogsBuilderConfig(t *testing.T, name string) LogsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultLogsBuilderConfig()
	require.NoError(t, sub.Unmarshal(&cfg, confmap.WithIgnoreUnused()))
	return cfg
}

func TestAttributesConfig(t *testing.T) {
	tests := []struct {
		name string
		want AttributesConfig
	}{
		{
			name: "default",
			want: DefaultAttributesConfig(),
		},
		{
			name: "all_set",
			want: AttributesConfig{
				BooleanAttr:        AttributeConfig{Enabled: true},
				BooleanAttr2:       AttributeConfig{Enabled: true},
				EnumAttr:           AttributeConfig{Enabled: true},
				MapAttr:            AttributeConfig{Enabled: true},
				OptionalIntAttr:    AttributeConfig{Enabled: true},
				OptionalStringAttr: AttributeConfig{Enabled: true},
				OverriddenIntAttr:  AttributeConfig{Enabled: true},
				SliceAttr:          AttributeConfig{Enabled: true},
				StringAttr:         AttributeConfig{Enabled: true},
			},
		},
		{
			name: "none_set",
			want: AttributesConfig{
				BooleanAttr:        AttributeConfig{Enabled: false},
				BooleanAttr2:       AttributeConfig{Enabled: false},
				EnumAttr:           AttributeConfig{Enabled: false},
				MapAttr:            AttributeConfig{Enabled: false},
				OptionalIntAttr:    AttributeConfig{Enabled: false},
				OptionalStringAttr: AttributeConfig{Enabled: false},
				OverriddenIntAttr:  AttributeConfig{Enabled: false},
				SliceAttr:          AttributeConfig{Enabled: false},
				StringAttr:         AttributeConfig{Enabled: false},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadAttributesConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(AttributeConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadAttributesConfig(t *testing.T, name string) AttributesConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	sub, err = sub.Sub("attributes")
	require.NoError(t, err)
	cfg := DefaultAttributesConfig()
	require.NoError(t, sub.Unmarshal(&cfg))
	return cfg
}

func TestResourceAttributesConfig(t *testing.T) {
	tests := []struct {
		name string
		want ResourceAttributesConfig
	}{
		{
			name: "default",
			want: DefaultResourceAttributesConfig(),
		},
		{
			name: "all_set",
			want: ResourceAttributesConfig{
				MapResourceAttr:                  ResourceAttributeConfig{Enabled: true},
				OptionalResourceAttr:             ResourceAttributeConfig{Enabled: true},
				SliceResourceAttr:                ResourceAttributeConfig{Enabled: true},
				StringEnumResourceAttr:           ResourceAttributeConfig{Enabled: true},
				StringResourceAttr:               ResourceAttributeConfig{Enabled: true},
				StringResourceAttrDisableWarning: ResourceAttributeConfig{Enabled: true},
				StringResourceAttrRemoveWarning:  ResourceAttributeConfig{Enabled: true},
				StringResourceAttrToBeRemoved:    ResourceAttributeConfig{Enabled: true},
			},
		},
		{
			name: "none_set",
			want: ResourceAttributesConfig{
				MapResourceAttr:                  ResourceAttributeConfig{Enabled: false},
				OptionalResourceAttr:             ResourceAttributeConfig{Enabled: false},
				SliceResourceAttr:                ResourceAttributeConfig{Enabled: false},
				StringEnumResourceAttr:           ResourceAttributeConfig{Enabled: false},
				StringResourceAttr:               ResourceAttributeConfig{Enabled: false},
				StringResourceAttrDisableWarning: ResourceAttributeConfig{Enabled: false},
				StringResourceAttrRemoveWarning:  ResourceAttributeConfig{Enabled: false},
				StringResourceAttrToBeRemoved:    ResourceAttributeConfig{Enabled: false},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadResourceAttributesConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(ResourceAttributeConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadResourceAttributesConfig(t *testing.T, name string) ResourceAttributesConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	sub, err = sub.Sub("resource_attributes")
	require.NoError(t, err)
	cfg := DefaultResourceAttributesConfig()
	require.NoError(t, sub.Unmarshal(&cfg))
	return cfg
}
