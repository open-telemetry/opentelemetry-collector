// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test_pkg

import "encoding/json"

type Config struct {
	// ExampleType corresponds to the JSON schema field "ExampleType".
	ExampleType ConfigExampleType `mapstructure:"ExampleType"`
}

type ConfigExampleType struct {
	// ExampleString corresponds to the JSON schema field "ExampleString".
	ExampleString string `mapstructure:"ExampleString"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConfigExampleType) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain ConfigExampleType
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["ExampleString"]; !ok || v == nil {
		plain.ExampleString = ""
	}
	*j = ConfigExampleType(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Config) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain Config
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["ExampleType"]; !ok || v == nil {
		plain.ExampleType = ConfigExampleType{
			ExampleString: "ex_default",
		}
	}
	*j = Config(plain)
	return nil
}
