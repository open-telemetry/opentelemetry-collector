// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test_pkg

import (
	"encoding/json"
	"fmt"
	"time"
)

// Configuration parameters for the batch processor.
type Config struct {
	// Prevent unkeyed literal initialization.
	_ struct{} `mapstructure:"_"`

	// MetadataCardinalityLimit indicates the maximum number of batcher instances that
	// will be created through a distinct combination of MetadataKeys.
	MetadataCardinalityLimit uint32 `mapstructure:"metadata_cardinality_limit"`

	// MetadataKeys is a list of client.Metadata keys that will be used to form
	// distinct batchers.  If this setting is empty, a single batcher instance will be
	// used.  When this setting is not empty, one batcher will be used per distinct
	// combination of values for the listed metadata keys.
	//
	// Empty value and unset metadata are treated as distinct cases.
	//
	// Entries are case-insensitive.  Duplicated entries will trigger a validation
	// error.
	MetadataKeys []string `mapstructure:"metadata_keys"`

	// SendBatchMaxSize is the maximum size of a batch. It must be larger than
	// SendBatchSize. Larger batches are split into smaller units. Default value is 0,
	// that means no maximum size.
	SendBatchMaxSize uint32 `mapstructure:"send_batch_max_size"`

	// SendBatchSize is the size of a batch which after hit, will trigger it to be
	// sent. When this is set to zero, the batch size is ignored and data will be sent
	// immediately subject to only send_batch_max_size.
	SendBatchSize uint32 `mapstructure:"send_batch_size"`

	// Timeout sets the time after which a batch will be sent regardless of size. When
	// this is set to zero, batched data will be sent immediately.
	Timeout time.Duration `mapstructure:"timeout"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Config) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain Config
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["metadata_cardinality_limit"]; !ok || v == nil {
		plain.MetadataCardinalityLimit = 1000.0
	}
	if v, ok := raw["send_batch_max_size"]; !ok || v == nil {
		plain.SendBatchMaxSize = 0.0
	}
	if v, ok := raw["send_batch_size"]; !ok || v == nil {
		plain.SendBatchSize = 8192.0
	}
	if v, ok := raw["timeout"]; !ok || v == nil {
		defaultDuration, err := time.ParseDuration("200ms")
		if err != nil {
			return fmt.Errorf("failed to parse the \"200ms\" default value for field timeout: %w", err)
		}
		plain.Timeout = defaultDuration

	}
	*j = Config(plain)
	return nil
}
