// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package configcompression

import (
	"encoding/json"
	"fmt"
	"reflect"
)

type Type string

const (
	TypeBlank   Type = ""
	TypeDeflate Type = "deflate"
	TypeGzip    Type = "gzip"
	TypeNone    Type = "none"
	TypeSnappy  Type = "snappy"
	TypeZlib    Type = "zlib"
	TypeZstd    Type = "zstd"
)

var enumValues_Type = []interface{}{
	"gzip",
	"zlib",
	"deflate",
	"snappy",
	"zstd",
	"none",
	"",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Type) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Type {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Type, v)
	}
	*j = Type(v)
	return nil
}
