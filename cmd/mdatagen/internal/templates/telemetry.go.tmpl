// Code generated by mdatagen. DO NOT EDIT.

package {{ .Package }}

import (
    {{- if .Telemetry.Metrics }}
    {{- range $_, $metric := .Telemetry.Metrics }}
    {{- if $metric.Data.Async }}
    "context"
    {{- break}}
    {{- end }}
    {{- end }}
    "errors"
    {{- end }}

	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"

	"go.opentelemetry.io/collector/component"
    "go.opentelemetry.io/collector/config/configtelemetry"
)

func Meter(settings component.TelemetrySettings) metric.Meter {
	return settings.MeterProvider.Meter("{{ .ScopeName }}")
}

func Tracer(settings component.TelemetrySettings) trace.Tracer {
	return settings.TracerProvider.Tracer("{{ .ScopeName }}")
}
{{- if .Telemetry.Metrics }}

// TelemetryBuilder provides an interface for components to report telemetry 
// as defined in metadata and user config.
type TelemetryBuilder struct {
    meter metric.Meter
	{{- range $name, $metric := .Telemetry.Metrics }}
	{{ $name.Render }} metric.{{ $metric.Data.Instrument }}
    {{- if and ($metric.Data.Async) (not $metric.Optional) }}
    observe{{ $name.Render }} func(context.Context, metric.Observer) error
    {{- end }}
	{{- end }}
}

// TelemetryBuilderOption applies changes to default builder.
type TelemetryBuilderOption interface {
    apply(*TelemetryBuilder)
}

type telemetryBuilderOptionFunc func(mb *TelemetryBuilder)

func (tbof telemetryBuilderOptionFunc) apply(mb *TelemetryBuilder) {
  tbof(mb)
}


{{- range $name, $metric := .Telemetry.Metrics }}
{{- if $metric.Optional }}
// Init{{ $name.Render }} configures the {{ $name.Render }} metric.
func (builder *TelemetryBuilder) Init{{ $name.Render }}({{ if $metric.Data.Async -}}cb func() {{ $metric.Data.BasicType }}{{- end }}, opts ...metric.ObserveOption) error {
    var err error
    builder.{{ $name.Render }}, err = builder.meter.{{ $metric.Data.Instrument }}(
        "otelcol_{{ $name }}",
        metric.WithDescription("{{ $metric.Description }}"),
        metric.WithUnit("{{ $metric.Unit }}"),
        {{- if eq $metric.Data.Type "Histogram" -}}
        {{ if $metric.Data.Boundaries -}}metric.WithExplicitBucketBoundaries([]float64{ {{- range $metric.Data.Boundaries }} {{.}}, {{- end }} }...),{{- end }}
        {{- end }}
    )
    {{- if $metric.Data.Async }}
    if err != nil {
        return err
    }
    _, err = builder.meter.RegisterCallback(func(_ context.Context, o metric.Observer) error {
        o.Observe{{ casesTitle $metric.Data.BasicType }}(builder.{{ $name.Render }}, cb(), opts...)
        return nil
    }, builder.{{ $name.Render }})
    {{- end }}
    return err
}

    {{- else }}
    {{ if $metric.Data.Async -}}
// With{{ $name.Render }}Callback sets callback for observable {{ $name.Render }} metric.
func With{{ $name.Render }}Callback(cb func() {{ $metric.Data.BasicType }}, opts ...metric.ObserveOption) TelemetryBuilderOption {
    return telemetryBuilderOptionFunc(func(builder *TelemetryBuilder) {
        builder.observe{{ $name.Render }} = func(_ context.Context, o metric.Observer) error {
            o.Observe{{ casesTitle $metric.Data.BasicType }}(builder.{{ $name.Render }}, cb(), opts...)
            return nil
        }
    })
}
    {{- end }}
    {{- end }}
{{- end }}


// NewTelemetryBuilder provides a struct with methods to update all internal telemetry
// for a component
func NewTelemetryBuilder(settings component.TelemetrySettings, options ...TelemetryBuilderOption) (*TelemetryBuilder, error) {
    builder := TelemetryBuilder{}
	for _, op := range options {
		op.apply(&builder)
	}
    builder.meter = Meter(settings)
    var err, errs error

    {{- range $name, $metric := .Telemetry.Metrics }}
    {{- if not $metric.Optional }}
    builder.{{ $name.Render }}, err = getLeveledMeter(builder.meter, configtelemetry.Level{{ $metric.Level }}, settings.MetricsLevel).{{ $metric.Data.Instrument }}(
        "otelcol_{{ $name }}",
        metric.WithDescription("{{ $metric.Description }}{{ $metric.Stability }}"),
        metric.WithUnit("{{ $metric.Unit }}"),
        {{ if eq $metric.Data.Type "Histogram" -}}
        {{- if $metric.Data.Boundaries -}}metric.WithExplicitBucketBoundaries([]float64{ {{- range $metric.Data.Boundaries }} {{.}}, {{- end }} }...),{{- end }}
        {{- end }}
    )
    errs = errors.Join(errs, err)
    {{- if $metric.Data.Async }}
    _, err = getLeveledMeter(builder.meter, configtelemetry.Level{{ $metric.Level }}, settings.MetricsLevel).RegisterCallback(builder.observe{{ $name.Render }}, builder.{{ $name.Render }})
    errs = errors.Join(errs, err)
    {{- end }}
    {{- end }}
    {{- end }}
    return &builder, errs
}

func getLeveledMeter(meter metric.Meter, cfgLevel, srvLevel configtelemetry.Level) metric.Meter {
	if cfgLevel <= srvLevel {
		return meter
	}
	return noop.Meter{}
}

{{- end }}
