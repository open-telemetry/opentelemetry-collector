// Code generated by mdatagen. DO NOT EDIT.

package {{ .Package }}

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"

    "go.opentelemetry.io/collector/pdata/pcommon"
    {{- if or isReceiver isScraper }}
    "go.opentelemetry.io/collector/{{ .Status.Class }}/{{ .Status.Class }}test"
    {{- end }}
)

func TestLogsBuilderAppendLogRecord(t *testing.T) {
    observedZapCore, _ := observer.New(zap.WarnLevel)
    {{- if or isReceiver isScraper }}
    settings := {{ .Status.Class }}test.NewNopSettings({{ .Status.Class }}test.NopType)
    {{- end }}
    settings.Logger = zap.New(observedZapCore)
    lb := NewLogsBuilder(settings)

    {{ if .ResourceAttributes }}
    rb := lb.NewResourceBuilder()
    {{- range $name, $attr := .ResourceAttributes }}
    {{- if $attr.Enum }}
    rb.Set{{ $attr.Name.Render }}{{ index $attr.Enum 0 | publicVar }}()
    {{- else }}
    rb.Set{{ $attr.Name.Render }}({{ $attr.TestValue }})
    {{- end }}
    {{- end }}
    res := rb.Emit()
    {{- else }}
    res := pcommon.NewResource()
    {{- end }}

	// append the first log record
	lr := plog.NewLogRecord()
	lr.SetTimestamp(pcommon.NewTimestampFromTime(time.Now()))
	lr.Attributes().PutStr("type", "log")
	lr.Body().SetStr("the first log record")

	// append the second log record
	lr2 := plog.NewLogRecord()
	lr2.SetTimestamp(pcommon.NewTimestampFromTime(time.Now()))
	lr2.Attributes().PutStr("type", "event")
	lr2.Body().SetStr("the second log record")

	lb.AppendLogRecord(lr)
	lb.AppendLogRecord(lr2)

	logs := lb.Emit(WithLogsResource(res))
	assert.Equal(t, 1, logs.ResourceLogs().Len())

	rl := logs.ResourceLogs().At(0)
	assert.Equal(t, 1, rl.ScopeLogs().Len())

	sl := rl.ScopeLogs().At(0)
	assert.Equal(t, ScopeName,sl.Scope().Name())
	assert.Equal(t, lb.buildInfo.Version, sl.Scope().Version())

	assert.Equal(t, 2, sl.LogRecords().Len())

	attrVal, ok := sl.LogRecords().At(0).Attributes().Get("type")
	assert.True(t, ok)
	assert.Equal(t, "log", attrVal.Str())

	assert.Equal(t, pcommon.ValueTypeStr, sl.LogRecords().At(0).Body().Type())
	assert.Equal(t, "the first log record", sl.LogRecords().At(0).Body().Str())

	attrVal, ok = sl.LogRecords().At(1).Attributes().Get("type")
	assert.True(t, ok)
	assert.Equal(t, "event", attrVal.Str())

	assert.Equal(t, pcommon.ValueTypeStr, sl.LogRecords().At(1).Body().Type())
	assert.Equal(t, "the second log record", sl.LogRecords().At(1).Body().Str())
}
