// Code generated by mdatagen. DO NOT EDIT.

package {{ .Package }}test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/otel/sdk/metric/metricdata"
	"go.opentelemetry.io/otel/sdk/metric/metricdata/metricdatatest"

	{{- if or isConnector isExporter isExtension isProcessor isReceiver isScraper }}
	"go.opentelemetry.io/collector/component"
	{{- end }}
	"go.opentelemetry.io/collector/component/componenttest"
	{{- if or isConnector isExporter isExtension isProcessor isReceiver isScraper }}
	"go.opentelemetry.io/collector/{{ .Status.Class }}"
	"go.opentelemetry.io/collector/{{ .Status.Class }}/{{ .Status.Class }}test"
	{{- end }}
)

type Telemetry struct {
	componenttest.Telemetry
}

func SetupTelemetry(opts ...componenttest.TelemetryOption) Telemetry {
	return Telemetry{ Telemetry: componenttest.NewTelemetry(opts...) }
}

{{ if or isConnector isExporter isExtension isProcessor isReceiver isScraper }}
func (tt *Telemetry) NewSettings() {{ .Status.Class }}.Settings {
	set := {{ .Status.Class }}test.NewNopSettings()
	set.ID = component.NewID(component.MustNewType("{{ .Type }}"))
	set.TelemetrySettings = tt.NewTelemetrySettings()
	return set
}
{{- end }}

func (tt *Telemetry) AssertMetrics(t *testing.T, expected []metricdata.Metrics, opts ...metricdatatest.Option) {
	var md metricdata.ResourceMetrics
	require.NoError(t, tt.Reader.Collect(context.Background(), &md))
	// ensure all required metrics are present
	for _, want := range expected {
		got := getMetricFromResource(want.Name, md)
		metricdatatest.AssertEqual(t, want, got, opts...)
	}

	// ensure no additional metrics are emitted
	require.Equal(t, len(expected), lenMetrics(md))
}

{{ range $name, $metric := .Telemetry.Metrics }}
{{ if not $metric.Optional }}
func AssertEqual{{ $name.Render }}(t *testing.T, tt componenttest.Telemetry, dps []metricdata.{{- if eq $metric.Data.Type "Histogram" }} {{$metric.Data.Type}} {{- end }}DataPoint[{{ $metric.Data.BasicType }}], opts ...metricdatatest.Option) {
	want := metricdata.Metrics{
		Name:        "otelcol_{{ $name }}",
		Description: "{{ $metric.Description }}{{ $metric.Stability }}",
		Unit:        "{{ $metric.Unit }}",
		Data:        metricdata.{{ $metric.Data.Type }}[{{ $metric.Data.BasicType }}]{
			{{- if $metric.Data.HasAggregated }}
			Temporality: metricdata.CumulativeTemporality,
			{{- end }}
			{{- if $metric.Data.HasMonotonic }}
			IsMonotonic: {{ $metric.Data.Monotonic }},
			{{- end }}
			DataPoints: dps,
		},
	}
	got := getMetric(t, tt, "otelcol_{{ $name }}")
	metricdatatest.AssertEqual(t, want, got, opts...)
}

{{- end }}
{{- end }}

func getMetric(t *testing.T, tt componenttest.Telemetry, name string) metricdata.Metrics {
	var md metricdata.ResourceMetrics
	require.NoError(t, tt.Reader.Collect(context.Background(), &md))
	return getMetricFromResource(name, md)
}

func getMetricFromResource(name string, got metricdata.ResourceMetrics) metricdata.Metrics {
	for _, sm := range got.ScopeMetrics {
		for _, m := range sm.Metrics {
			if m.Name == name {
				return m
			}
		}
	}

	return metricdata.Metrics{}
}

func lenMetrics(got metricdata.ResourceMetrics) int {
	metricsCount := 0
	for _, sm := range got.ScopeMetrics {
		metricsCount += len(sm.Metrics)
	}

	return metricsCount
}
