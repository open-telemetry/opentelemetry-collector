// Code generated by mdatagen. DO NOT EDIT.

package metadatatest

import (
	"testing"

	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/otel/sdk/metric/metricdata"
	"go.opentelemetry.io/otel/sdk/metric/metricdata/metricdatatest"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/component/componenttest"
	"go.opentelemetry.io/collector/internal/telemetry"
	"go.opentelemetry.io/collector/processor"
	"go.opentelemetry.io/collector/processor/processortest"
)

func NewSettings(tt *componenttest.Telemetry) processor.Settings {
	set := processortest.NewNopSettings(processortest.NopType)
	set.ID = component.NewID(component.MustNewType("batch"))
	set.TelemetrySettings = tt.NewTelemetrySettings()
	return set
}

func AssertEqualProcessorBatchBatchSendSize(t *testing.T, tt *componenttest.Telemetry, dps []metricdata.HistogramDataPoint[int64], opts ...metricdatatest.Option) {
	name := "otelcol_processor_batch_batch_send_size"
	if telemetry.OwnMetricsUsePeriodPrefixGate.IsEnabled() {
		name = "otelcol.processor_batch_batch_send_size"
	}
	want := metricdata.Metrics{
		Name:        name,
		Description: "Number of units in the batch",
		Unit:        "{units}",
		Data: metricdata.Histogram[int64]{
			Temporality: metricdata.CumulativeTemporality,
			DataPoints:  dps,
		},
	}
	got, err := tt.GetMetric(name)
	require.NoError(t, err)
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func AssertEqualProcessorBatchBatchSendSizeBytes(t *testing.T, tt *componenttest.Telemetry, dps []metricdata.HistogramDataPoint[int64], opts ...metricdatatest.Option) {
	name := "otelcol_processor_batch_batch_send_size_bytes"
	if telemetry.OwnMetricsUsePeriodPrefixGate.IsEnabled() {
		name = "otelcol.processor_batch_batch_send_size_bytes"
	}
	want := metricdata.Metrics{
		Name:        name,
		Description: "Number of bytes in batch that was sent. Only available on detailed level.",
		Unit:        "By",
		Data: metricdata.Histogram[int64]{
			Temporality: metricdata.CumulativeTemporality,
			DataPoints:  dps,
		},
	}
	got, err := tt.GetMetric(name)
	require.NoError(t, err)
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func AssertEqualProcessorBatchBatchSizeTriggerSend(t *testing.T, tt *componenttest.Telemetry, dps []metricdata.DataPoint[int64], opts ...metricdatatest.Option) {
	name := "otelcol_processor_batch_batch_size_trigger_send"
	if telemetry.OwnMetricsUsePeriodPrefixGate.IsEnabled() {
		name = "otelcol.processor_batch_batch_size_trigger_send"
	}
	want := metricdata.Metrics{
		Name:        name,
		Description: "Number of times the batch was sent due to a size trigger",
		Unit:        "{times}",
		Data: metricdata.Sum[int64]{
			Temporality: metricdata.CumulativeTemporality,
			IsMonotonic: true,
			DataPoints:  dps,
		},
	}
	got, err := tt.GetMetric(name)
	require.NoError(t, err)
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func AssertEqualProcessorBatchMetadataCardinality(t *testing.T, tt *componenttest.Telemetry, dps []metricdata.DataPoint[int64], opts ...metricdatatest.Option) {
	name := "otelcol_processor_batch_metadata_cardinality"
	if telemetry.OwnMetricsUsePeriodPrefixGate.IsEnabled() {
		name = "otelcol.processor_batch_metadata_cardinality"
	}
	want := metricdata.Metrics{
		Name:        name,
		Description: "Number of distinct metadata value combinations being processed",
		Unit:        "{combinations}",
		Data: metricdata.Sum[int64]{
			Temporality: metricdata.CumulativeTemporality,
			IsMonotonic: false,
			DataPoints:  dps,
		},
	}
	got, err := tt.GetMetric(name)
	require.NoError(t, err)
	metricdatatest.AssertEqual(t, want, got, opts...)
}

func AssertEqualProcessorBatchTimeoutTriggerSend(t *testing.T, tt *componenttest.Telemetry, dps []metricdata.DataPoint[int64], opts ...metricdatatest.Option) {
	name := "otelcol_processor_batch_timeout_trigger_send"
	if telemetry.OwnMetricsUsePeriodPrefixGate.IsEnabled() {
		name = "otelcol.processor_batch_timeout_trigger_send"
	}
	want := metricdata.Metrics{
		Name:        name,
		Description: "Number of times the batch was sent due to a timeout trigger",
		Unit:        "{times}",
		Data: metricdata.Sum[int64]{
			Temporality: metricdata.CumulativeTemporality,
			IsMonotonic: true,
			DataPoints:  dps,
		},
	}
	got, err := tt.GetMetric(name)
	require.NoError(t, err)
	metricdatatest.AssertEqual(t, want, got, opts...)
}
